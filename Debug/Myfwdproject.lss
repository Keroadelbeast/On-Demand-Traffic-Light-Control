
Myfwdproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b12  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000b86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000b86  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012dc  00000000  00000000  00000d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ab  00000000  00000000  00001ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009c2  00000000  00000000  0000289b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  00003260  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bf  00000000  00000000  00003458  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bd0  00000000  00000000  00003917  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000044e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 86 01 	call	0x30c	; 0x30c <main>
  74:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <app_init>:
Uint8 mode=LOW;//low for normal high for pedestarian



void app_init(void){
	LED_INIT(LED_NORMAL,LED_GREEN);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LED_INIT>
	LED_INIT(LED_NORMAL,LED_YELLOW);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LED_INIT>
	LED_INIT(LED_NORMAL,LED_RED);
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LED_INIT>
	//PEDESTERIAN MODE INIT
	LED_INIT(LED_PEDESTRIANS,LED_GREEN);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LED_INIT>
	LED_INIT(LED_PEDESTRIANS,LED_YELLOW);
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LED_INIT>
	LED_INIT(LED_PEDESTRIANS,LED_RED);
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LED_INIT>
	BUTTON_INIT(button_port,button_pin);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <BUTTON_INIT>
	TIMER_init();
  b4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <TIMER_init>
	sei();
  b8:	78 94       	sei
	RISING_EDGE();
  ba:	85 b7       	in	r24, 0x35	; 53
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	85 bf       	out	0x35, r24	; 53
	SETUP_INT0();
  c0:	8b b7       	in	r24, 0x3b	; 59
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	8b bf       	out	0x3b, r24	; 59
  c6:	08 95       	ret

000000c8 <__vector_1>:
		/////////////////////////////////////////////////////////////////
		
	}

	ISR(INT0_vect)
	{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
		mode=HIGH;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <clickOnYelloworGreen>:
	void clickOnYelloworGreen(Uint8 state){
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	18 2f       	mov	r17, r24

		LED_OFF(LED_NORMAL,LED_GREEN);
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	81 e4       	ldi	r24, 0x41	; 65
  f2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
		LED_ON(LED_PEDESTRIANS,LED_RED);
  f6:	62 e0       	ldi	r22, 0x02	; 2
  f8:	82 e4       	ldi	r24, 0x42	; 66
  fa:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LED_ON>
		TIMER_delay(5000);
  fe:	88 e8       	ldi	r24, 0x88	; 136
 100:	93 e1       	ldi	r25, 0x13	; 19
 102:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <TIMER_delay>
		LED_OFF(LED_PEDESTRIANS,LED_RED);
 106:	62 e0       	ldi	r22, 0x02	; 2
 108:	82 e4       	ldi	r24, 0x42	; 66
 10a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
		for(int i = 0;i < 10;i++)
 10e:	c0 e0       	ldi	r28, 0x00	; 0
 110:	d0 e0       	ldi	r29, 0x00	; 0
 112:	0d c0       	rjmp	.+26     	; 0x12e <clickOnYelloworGreen+0x48>
		{
			LED_TOGGLE(LED_NORMAL, LED_YELLOW);
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	81 e4       	ldi	r24, 0x41	; 65
 118:	0e 94 80 01 	call	0x300	; 0x300 <LED_TOGGLE>
			LED_TOGGLE(LED_PEDESTRIANS, LED_YELLOW);
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	82 e4       	ldi	r24, 0x42	; 66
 120:	0e 94 80 01 	call	0x300	; 0x300 <LED_TOGGLE>
			TIMER_delay(500);
 124:	84 ef       	ldi	r24, 0xF4	; 244
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <TIMER_delay>

		LED_OFF(LED_NORMAL,LED_GREEN);
		LED_ON(LED_PEDESTRIANS,LED_RED);
		TIMER_delay(5000);
		LED_OFF(LED_PEDESTRIANS,LED_RED);
		for(int i = 0;i < 10;i++)
 12c:	21 96       	adiw	r28, 0x01	; 1
 12e:	ca 30       	cpi	r28, 0x0A	; 10
 130:	d1 05       	cpc	r29, r1
 132:	84 f3       	brlt	.-32     	; 0x114 <clickOnYelloworGreen+0x2e>
		{
			LED_TOGGLE(LED_NORMAL, LED_YELLOW);
			LED_TOGGLE(LED_PEDESTRIANS, LED_YELLOW);
			TIMER_delay(500);
		}
		LED_OFF(LED_NORMAL, LED_YELLOW);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	81 e4       	ldi	r24, 0x41	; 65
 138:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
		LED_ON(LED_NORMAL, LED_RED);
 13c:	62 e0       	ldi	r22, 0x02	; 2
 13e:	81 e4       	ldi	r24, 0x41	; 65
 140:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LED_ON>
		
		LED_OFF(LED_PEDESTRIANS, LED_YELLOW);
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	82 e4       	ldi	r24, 0x42	; 66
 148:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
		LED_ON(LED_PEDESTRIANS, LED_GREEN); // Pedestrian's can cross the road
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	82 e4       	ldi	r24, 0x42	; 66
 150:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LED_ON>
		LED_OFF(LED_NORMAL, LED_RED);
 154:	62 e0       	ldi	r22, 0x02	; 2
 156:	81 e4       	ldi	r24, 0x41	; 65
 158:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
		TIMER_delay(5000);
 15c:	88 e8       	ldi	r24, 0x88	; 136
 15e:	93 e1       	ldi	r25, 0x13	; 19
 160:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <TIMER_delay>
		LED_OFF(LED_NORMAL,LED_RED);
 164:	62 e0       	ldi	r22, 0x02	; 2
 166:	81 e4       	ldi	r24, 0x41	; 65
 168:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
		// Cars' red led will be off
		// Pedestrian's and  the cars' yellow leds will blink for 5 sec
		for(int i = 0;i < 10;i++)
 16c:	c0 e0       	ldi	r28, 0x00	; 0
 16e:	d0 e0       	ldi	r29, 0x00	; 0
 170:	0d c0       	rjmp	.+26     	; 0x18c <clickOnYelloworGreen+0xa6>
		{
			LED_TOGGLE(LED_NORMAL, LED_YELLOW);
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	81 e4       	ldi	r24, 0x41	; 65
 176:	0e 94 80 01 	call	0x300	; 0x300 <LED_TOGGLE>
			LED_TOGGLE(LED_PEDESTRIANS, LED_YELLOW);
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	82 e4       	ldi	r24, 0x42	; 66
 17e:	0e 94 80 01 	call	0x300	; 0x300 <LED_TOGGLE>
			TIMER_delay(500);
 182:	84 ef       	ldi	r24, 0xF4	; 244
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <TIMER_delay>
		LED_OFF(LED_NORMAL, LED_RED);
		TIMER_delay(5000);
		LED_OFF(LED_NORMAL,LED_RED);
		// Cars' red led will be off
		// Pedestrian's and  the cars' yellow leds will blink for 5 sec
		for(int i = 0;i < 10;i++)
 18a:	21 96       	adiw	r28, 0x01	; 1
 18c:	ca 30       	cpi	r28, 0x0A	; 10
 18e:	d1 05       	cpc	r29, r1
 190:	84 f3       	brlt	.-32     	; 0x172 <clickOnYelloworGreen+0x8c>
			LED_TOGGLE(LED_NORMAL, LED_YELLOW);
			LED_TOGGLE(LED_PEDESTRIANS, LED_YELLOW);
			TIMER_delay(500);
		}
		// Pedestrian green led will be off and both pedestrian red led and cars' green led will be on
		LED_OFF(LED_PEDESTRIANS, LED_GREEN);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	82 e4       	ldi	r24, 0x42	; 66
 196:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
		LED_OFF(LED_PEDESTRIANS, LED_YELLOW);
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	82 e4       	ldi	r24, 0x42	; 66
 19e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
		LED_ON(LED_PEDESTRIANS, LED_RED);
 1a2:	62 e0       	ldi	r22, 0x02	; 2
 1a4:	82 e4       	ldi	r24, 0x42	; 66
 1a6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LED_ON>
		
		LED_ON(LED_NORMAL, LED_GREEN);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	81 e4       	ldi	r24, 0x41	; 65
 1ae:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LED_ON>
		LED_OFF(LED_NORMAL, LED_YELLOW);
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	81 e4       	ldi	r24, 0x41	; 65
 1b6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
		LED_OFF(LED_NORMAL, LED_RED);
 1ba:	62 e0       	ldi	r22, 0x02	; 2
 1bc:	81 e4       	ldi	r24, 0x41	; 65
 1be:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
		TIMER_delay(5000);
 1c2:	88 e8       	ldi	r24, 0x88	; 136
 1c4:	93 e1       	ldi	r25, 0x13	; 19
 1c6:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <TIMER_delay>
		
		LED_OFF(LED_PEDESTRIANS, LED_RED);
 1ca:	62 e0       	ldi	r22, 0x02	; 2
 1cc:	82 e4       	ldi	r24, 0x42	; 66
 1ce:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
		LED_OFF(LED_NORMAL, LED_GREEN);
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	81 e4       	ldi	r24, 0x41	; 65
 1d6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
		
		// At first car's led was green of yellow
		if(state == HIGH)
 1da:	11 30       	cpi	r17, 0x01	; 1
 1dc:	99 f4       	brne	.+38     	; 0x204 <clickOnYelloworGreen+0x11e>
		{
			LED_OFF(LED_NORMAL, LED_RED);
 1de:	62 e0       	ldi	r22, 0x02	; 2
 1e0:	81 e4       	ldi	r24, 0x41	; 65
 1e2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
			for(int i = 0;i < 10;i++)
 1e6:	c0 e0       	ldi	r28, 0x00	; 0
 1e8:	d0 e0       	ldi	r29, 0x00	; 0
 1ea:	09 c0       	rjmp	.+18     	; 0x1fe <clickOnYelloworGreen+0x118>
			{
				LED_TOGGLE(LED_NORMAL, LED_YELLOW);
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	81 e4       	ldi	r24, 0x41	; 65
 1f0:	0e 94 80 01 	call	0x300	; 0x300 <LED_TOGGLE>
				TIMER_delay(500);
 1f4:	84 ef       	ldi	r24, 0xF4	; 244
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <TIMER_delay>
		
		// At first car's led was green of yellow
		if(state == HIGH)
		{
			LED_OFF(LED_NORMAL, LED_RED);
			for(int i = 0;i < 10;i++)
 1fc:	21 96       	adiw	r28, 0x01	; 1
 1fe:	ca 30       	cpi	r28, 0x0A	; 10
 200:	d1 05       	cpc	r29, r1
 202:	a4 f3       	brlt	.-24     	; 0x1ec <clickOnYelloworGreen+0x106>
			{
				LED_TOGGLE(LED_NORMAL, LED_YELLOW);
				TIMER_delay(500);
			}
		}
		mode = LOW;
 204:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		

	}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	08 95       	ret

00000210 <clickOnRed>:
	void clickOnRed(void){
		LED_OFF(LED_PEDESTRIANS,LED_RED);
 210:	62 e0       	ldi	r22, 0x02	; 2
 212:	82 e4       	ldi	r24, 0x42	; 66
 214:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
		LED_ON(LED_PEDESTRIANS, LED_GREEN); // Pedestrian's can cross the road
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	82 e4       	ldi	r24, 0x42	; 66
 21c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LED_ON>
		TIMER_delay(5000);
 220:	88 e8       	ldi	r24, 0x88	; 136
 222:	93 e1       	ldi	r25, 0x13	; 19
 224:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <TIMER_delay>
		LED_OFF(LED_PEDESTRIANS, LED_GREEN);
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	82 e4       	ldi	r24, 0x42	; 66
 22c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
		mode = LOW;
 230:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 234:	08 95       	ret

00000236 <app_start>:
	SETUP_INT0();

}

void app_start(void)
{
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
	//////////////////////normal mode////////////////////
	
	TIMER_init();
 23a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <TIMER_init>
	LED_ON(LED_PEDESTRIANS,LED_RED);
 23e:	62 e0       	ldi	r22, 0x02	; 2
 240:	82 e4       	ldi	r24, 0x42	; 66
 242:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LED_ON>
	LED_ON(LED_NORMAL,LED_GREEN);
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	81 e4       	ldi	r24, 0x41	; 65
 24a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LED_ON>
	TIMER_delay(5000);
 24e:	88 e8       	ldi	r24, 0x88	; 136
 250:	93 e1       	ldi	r25, 0x13	; 19
 252:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <TIMER_delay>
	if (mode==HIGH)
 256:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	19 f4       	brne	.+6      	; 0x264 <app_start+0x2e>
	{
		clickOnYelloworGreen(LOW);
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	0e 94 73 00 	call	0xe6	; 0xe6 <clickOnYelloworGreen>
	}
		LED_OFF(LED_NORMAL,LED_GREEN);
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	81 e4       	ldi	r24, 0x41	; 65
 268:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
		for (int i =0;i<10;i++){
 26c:	c0 e0       	ldi	r28, 0x00	; 0
 26e:	d0 e0       	ldi	r29, 0x00	; 0
 270:	0f c0       	rjmp	.+30     	; 0x290 <app_start+0x5a>
			LED_TOGGLE(LED_NORMAL,LED_YELLOW);
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	81 e4       	ldi	r24, 0x41	; 65
 276:	0e 94 80 01 	call	0x300	; 0x300 <LED_TOGGLE>
			TIMER_delay(500);
 27a:	84 ef       	ldi	r24, 0xF4	; 244
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <TIMER_delay>
			if (mode == HIGH){
 282:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	11 f4       	brne	.+4      	; 0x28e <app_start+0x58>
			clickOnYelloworGreen(HIGH);
 28a:	0e 94 73 00 	call	0xe6	; 0xe6 <clickOnYelloworGreen>
	if (mode==HIGH)
	{
		clickOnYelloworGreen(LOW);
	}
		LED_OFF(LED_NORMAL,LED_GREEN);
		for (int i =0;i<10;i++){
 28e:	21 96       	adiw	r28, 0x01	; 1
 290:	ca 30       	cpi	r28, 0x0A	; 10
 292:	d1 05       	cpc	r29, r1
 294:	74 f3       	brlt	.-36     	; 0x272 <app_start+0x3c>
			if (mode == HIGH){
			clickOnYelloworGreen(HIGH);
			}
		}
		
		LED_OFF(LED_NORMAL,LED_YELLOW);
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	81 e4       	ldi	r24, 0x41	; 65
 29a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
		LED_ON(LED_NORMAL,LED_RED);
 29e:	62 e0       	ldi	r22, 0x02	; 2
 2a0:	81 e4       	ldi	r24, 0x41	; 65
 2a2:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LED_ON>
		TIMER_delay(5000);
 2a6:	88 e8       	ldi	r24, 0x88	; 136
 2a8:	93 e1       	ldi	r25, 0x13	; 19
 2aa:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <TIMER_delay>
		if (mode == HIGH){
 2ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	11 f4       	brne	.+4      	; 0x2ba <app_start+0x84>
		clickOnRed();
 2b6:	0e 94 08 01 	call	0x210	; 0x210 <clickOnRed>
		}
		LED_OFF(LED_NORMAL,LED_RED);
 2ba:	62 e0       	ldi	r22, 0x02	; 2
 2bc:	81 e4       	ldi	r24, 0x41	; 65
 2be:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
		
		/////////////////////////////////////////////////////////////////
		
	}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <BUTTON_INIT>:
 *
 * Created: 11/7/2022 10:02:54 PM
 *  Author: carlo
 */ 
#include "button.h"
void BUTTON_INIT(Uint8 BUTTONPORT,Uint8 BUTTONPIN){ //button is an input device
 2c8:	98 2f       	mov	r25, r24
 2ca:	86 2f       	mov	r24, r22
	DIO_INIT(BUTTONPIN,BUTTONPORT,IN);
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	69 2f       	mov	r22, r25
 2d0:	0e 94 8b 01 	call	0x316	; 0x316 <DIO_INIT>
 2d4:	08 95       	ret

000002d6 <LED_INIT>:
 *
 * Created: 11/7/2022 10:53:52 AM
 *  Author: carlo
 */ 
#include "LED.h"
void LED_INIT(Uint8 LEDPORT,Uint8 LEDPIN){//output device
 2d6:	98 2f       	mov	r25, r24
 2d8:	86 2f       	mov	r24, r22
	DIO_INIT(LEDPIN,LEDPORT,OUT);	
 2da:	41 e0       	ldi	r20, 0x01	; 1
 2dc:	69 2f       	mov	r22, r25
 2de:	0e 94 8b 01 	call	0x316	; 0x316 <DIO_INIT>
 2e2:	08 95       	ret

000002e4 <LED_ON>:
}
void LED_ON(Uint8 LEDPORT,Uint8 LEDPIN){
 2e4:	98 2f       	mov	r25, r24
 2e6:	86 2f       	mov	r24, r22
	DIO_WRITE(LEDPIN,LEDPORT,HIGH);
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	69 2f       	mov	r22, r25
 2ec:	0e 94 16 02 	call	0x42c	; 0x42c <DIO_WRITE>
 2f0:	08 95       	ret

000002f2 <LED_OFF>:
}
void LED_OFF(Uint8 LEDPORT,Uint8 LEDPIN){
 2f2:	98 2f       	mov	r25, r24
 2f4:	86 2f       	mov	r24, r22
	DIO_WRITE(LEDPIN,LEDPORT,LOW);
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	69 2f       	mov	r22, r25
 2fa:	0e 94 16 02 	call	0x42c	; 0x42c <DIO_WRITE>
 2fe:	08 95       	ret

00000300 <LED_TOGGLE>:
}
void LED_TOGGLE(Uint8 LEDPORT,Uint8 LEDPIN){
 300:	98 2f       	mov	r25, r24
 302:	86 2f       	mov	r24, r22
	DIO_TOGGLE(LEDPIN,LEDPORT);
 304:	69 2f       	mov	r22, r25
 306:	0e 94 a1 02 	call	0x542	; 0x542 <DIO_TOGGLE>
 30a:	08 95       	ret

0000030c <main>:
#include <util/delay.h>//to use delay in function
#include "ECUAL/BUTTON DRIVER/button.h"

int main(void)
{
app_init();
 30c:	0e 94 3e 00 	call	0x7c	; 0x7c <app_init>

	while (1)
	{
		
		app_start();
 310:	0e 94 1b 01 	call	0x236	; 0x236 <app_start>
 314:	fd cf       	rjmp	.-6      	; 0x310 <main+0x4>

00000316 <DIO_INIT>:
*/
#include "../../STD.h"
#include "DIO.h"
void DIO_INIT(Uint8 PINNO,Uint8 PORTNO ,Uint8 DIR)
{
	switch(PORTNO){
 316:	62 34       	cpi	r22, 0x42	; 66
 318:	59 f1       	breq	.+86     	; 0x370 <DIO_INIT+0x5a>
 31a:	18 f4       	brcc	.+6      	; 0x322 <DIO_INIT+0xc>
 31c:	61 34       	cpi	r22, 0x41	; 65
 31e:	41 f0       	breq	.+16     	; 0x330 <DIO_INIT+0x1a>
 320:	08 95       	ret
 322:	63 34       	cpi	r22, 0x43	; 67
 324:	09 f4       	brne	.+2      	; 0x328 <DIO_INIT+0x12>
 326:	44 c0       	rjmp	.+136    	; 0x3b0 <DIO_INIT+0x9a>
 328:	64 34       	cpi	r22, 0x44	; 68
 32a:	09 f4       	brne	.+2      	; 0x32e <DIO_INIT+0x18>
 32c:	60 c0       	rjmp	.+192    	; 0x3ee <DIO_INIT+0xd8>
 32e:	08 95       	ret
		case PORT_A:
		if(DIR==IN){
 330:	41 11       	cpse	r20, r1
 332:	0e c0       	rjmp	.+28     	; 0x350 <DIO_INIT+0x3a>
			DDRA &= ~(1<<PINNO);//INPUT
 334:	4a b3       	in	r20, 0x1a	; 26
 336:	21 e0       	ldi	r18, 0x01	; 1
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	b9 01       	movw	r22, r18
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_INIT+0x2c>
 33e:	66 0f       	add	r22, r22
 340:	77 1f       	adc	r23, r23
 342:	8a 95       	dec	r24
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_INIT+0x28>
 346:	cb 01       	movw	r24, r22
 348:	80 95       	com	r24
 34a:	84 23       	and	r24, r20
 34c:	8a bb       	out	0x1a, r24	; 26
 34e:	08 95       	ret
			}else if(DIR==OUT){
 350:	41 30       	cpi	r20, 0x01	; 1
 352:	09 f0       	breq	.+2      	; 0x356 <DIO_INIT+0x40>
 354:	6a c0       	rjmp	.+212    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
			DDRA |= (1<<PINNO);//OUTPUT
 356:	4a b3       	in	r20, 0x1a	; 26
 358:	21 e0       	ldi	r18, 0x01	; 1
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	b9 01       	movw	r22, r18
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_INIT+0x4e>
 360:	66 0f       	add	r22, r22
 362:	77 1f       	adc	r23, r23
 364:	8a 95       	dec	r24
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_INIT+0x4a>
 368:	cb 01       	movw	r24, r22
 36a:	84 2b       	or	r24, r20
 36c:	8a bb       	out	0x1a, r24	; 26
 36e:	08 95       	ret
			}else{
			//error handling
		}
		break;
		case PORT_B:
		if(DIR==IN){
 370:	41 11       	cpse	r20, r1
 372:	0e c0       	rjmp	.+28     	; 0x390 <DIO_INIT+0x7a>
			DDRB &= ~(1<<PINNO);
 374:	47 b3       	in	r20, 0x17	; 23
 376:	21 e0       	ldi	r18, 0x01	; 1
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	b9 01       	movw	r22, r18
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_INIT+0x6c>
 37e:	66 0f       	add	r22, r22
 380:	77 1f       	adc	r23, r23
 382:	8a 95       	dec	r24
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_INIT+0x68>
 386:	cb 01       	movw	r24, r22
 388:	80 95       	com	r24
 38a:	84 23       	and	r24, r20
 38c:	87 bb       	out	0x17, r24	; 23
 38e:	08 95       	ret
			}else if(DIR==OUT){
 390:	41 30       	cpi	r20, 0x01	; 1
 392:	09 f0       	breq	.+2      	; 0x396 <DIO_INIT+0x80>
 394:	4a c0       	rjmp	.+148    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
			DDRB |= (1<<PINNO);
 396:	47 b3       	in	r20, 0x17	; 23
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	b9 01       	movw	r22, r18
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_INIT+0x8e>
 3a0:	66 0f       	add	r22, r22
 3a2:	77 1f       	adc	r23, r23
 3a4:	8a 95       	dec	r24
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_INIT+0x8a>
 3a8:	cb 01       	movw	r24, r22
 3aa:	84 2b       	or	r24, r20
 3ac:	87 bb       	out	0x17, r24	; 23
 3ae:	08 95       	ret
			//error handling
		}
		
		break;
		case PORT_C:
		if(DIR==IN){
 3b0:	41 11       	cpse	r20, r1
 3b2:	0e c0       	rjmp	.+28     	; 0x3d0 <DIO_INIT+0xba>
			DDRC &= ~(1<<PINNO);
 3b4:	44 b3       	in	r20, 0x14	; 20
 3b6:	21 e0       	ldi	r18, 0x01	; 1
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	b9 01       	movw	r22, r18
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_INIT+0xac>
 3be:	66 0f       	add	r22, r22
 3c0:	77 1f       	adc	r23, r23
 3c2:	8a 95       	dec	r24
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_INIT+0xa8>
 3c6:	cb 01       	movw	r24, r22
 3c8:	80 95       	com	r24
 3ca:	84 23       	and	r24, r20
 3cc:	84 bb       	out	0x14, r24	; 20
 3ce:	08 95       	ret
			}else if(DIR==OUT){
 3d0:	41 30       	cpi	r20, 0x01	; 1
 3d2:	59 f5       	brne	.+86     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
			DDRC |= (1<<PINNO);
 3d4:	44 b3       	in	r20, 0x14	; 20
 3d6:	21 e0       	ldi	r18, 0x01	; 1
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	b9 01       	movw	r22, r18
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_INIT+0xcc>
 3de:	66 0f       	add	r22, r22
 3e0:	77 1f       	adc	r23, r23
 3e2:	8a 95       	dec	r24
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_INIT+0xc8>
 3e6:	cb 01       	movw	r24, r22
 3e8:	84 2b       	or	r24, r20
 3ea:	84 bb       	out	0x14, r24	; 20
 3ec:	08 95       	ret
			}else{
			//error handling
		}
		break;
		case PORT_D:
		if(DIR==IN){
 3ee:	41 11       	cpse	r20, r1
 3f0:	0e c0       	rjmp	.+28     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
			DDRD &= ~(1<<PINNO);
 3f2:	41 b3       	in	r20, 0x11	; 17
 3f4:	21 e0       	ldi	r18, 0x01	; 1
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	b9 01       	movw	r22, r18
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	66 0f       	add	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	8a 95       	dec	r24
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_INIT+0xe6>
 404:	cb 01       	movw	r24, r22
 406:	80 95       	com	r24
 408:	84 23       	and	r24, r20
 40a:	81 bb       	out	0x11, r24	; 17
 40c:	08 95       	ret
			}else if(DIR==OUT){
 40e:	41 30       	cpi	r20, 0x01	; 1
 410:	61 f4       	brne	.+24     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
			DDRD |= (1<<PINNO);
 412:	41 b3       	in	r20, 0x11	; 17
 414:	21 e0       	ldi	r18, 0x01	; 1
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	b9 01       	movw	r22, r18
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41c:	66 0f       	add	r22, r22
 41e:	77 1f       	adc	r23, r23
 420:	8a 95       	dec	r24
 422:	e2 f7       	brpl	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 424:	cb 01       	movw	r24, r22
 426:	84 2b       	or	r24, r20
 428:	81 bb       	out	0x11, r24	; 17
 42a:	08 95       	ret

0000042c <DIO_WRITE>:
	}
	
}
void DIO_WRITE(Uint8 PINNO,Uint8 PORTNO ,Uint8 VAL){
	
	switch(PORTNO){
 42c:	62 34       	cpi	r22, 0x42	; 66
 42e:	59 f1       	breq	.+86     	; 0x486 <DIO_WRITE+0x5a>
 430:	18 f4       	brcc	.+6      	; 0x438 <DIO_WRITE+0xc>
 432:	61 34       	cpi	r22, 0x41	; 65
 434:	41 f0       	breq	.+16     	; 0x446 <DIO_WRITE+0x1a>
 436:	08 95       	ret
 438:	63 34       	cpi	r22, 0x43	; 67
 43a:	09 f4       	brne	.+2      	; 0x43e <DIO_WRITE+0x12>
 43c:	44 c0       	rjmp	.+136    	; 0x4c6 <DIO_WRITE+0x9a>
 43e:	64 34       	cpi	r22, 0x44	; 68
 440:	09 f4       	brne	.+2      	; 0x444 <DIO_WRITE+0x18>
 442:	60 c0       	rjmp	.+192    	; 0x504 <DIO_WRITE+0xd8>
 444:	08 95       	ret
		case PORT_A:
		if(VAL==LOW){
 446:	41 11       	cpse	r20, r1
 448:	0e c0       	rjmp	.+28     	; 0x466 <DIO_WRITE+0x3a>
			PORTA &= ~(1<<PINNO);//WRITE 0
 44a:	4b b3       	in	r20, 0x1b	; 27
 44c:	21 e0       	ldi	r18, 0x01	; 1
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	b9 01       	movw	r22, r18
 452:	02 c0       	rjmp	.+4      	; 0x458 <DIO_WRITE+0x2c>
 454:	66 0f       	add	r22, r22
 456:	77 1f       	adc	r23, r23
 458:	8a 95       	dec	r24
 45a:	e2 f7       	brpl	.-8      	; 0x454 <DIO_WRITE+0x28>
 45c:	cb 01       	movw	r24, r22
 45e:	80 95       	com	r24
 460:	84 23       	and	r24, r20
 462:	8b bb       	out	0x1b, r24	; 27
 464:	08 95       	ret
			}else if(VAL==HIGH){
 466:	41 30       	cpi	r20, 0x01	; 1
 468:	09 f0       	breq	.+2      	; 0x46c <DIO_WRITE+0x40>
 46a:	6a c0       	rjmp	.+212    	; 0x540 <DIO_WRITE+0x114>
			PORTA|= (1<<PINNO);//WRITE 1
 46c:	4b b3       	in	r20, 0x1b	; 27
 46e:	21 e0       	ldi	r18, 0x01	; 1
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	b9 01       	movw	r22, r18
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_WRITE+0x4e>
 476:	66 0f       	add	r22, r22
 478:	77 1f       	adc	r23, r23
 47a:	8a 95       	dec	r24
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_WRITE+0x4a>
 47e:	cb 01       	movw	r24, r22
 480:	84 2b       	or	r24, r20
 482:	8b bb       	out	0x1b, r24	; 27
 484:	08 95       	ret
			}else{
			//error handling
		}
		break;
		case PORT_B:
		if(VAL==LOW){
 486:	41 11       	cpse	r20, r1
 488:	0e c0       	rjmp	.+28     	; 0x4a6 <DIO_WRITE+0x7a>
			PORTB &= ~(1<<PINNO);
 48a:	48 b3       	in	r20, 0x18	; 24
 48c:	21 e0       	ldi	r18, 0x01	; 1
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	b9 01       	movw	r22, r18
 492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_WRITE+0x6c>
 494:	66 0f       	add	r22, r22
 496:	77 1f       	adc	r23, r23
 498:	8a 95       	dec	r24
 49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_WRITE+0x68>
 49c:	cb 01       	movw	r24, r22
 49e:	80 95       	com	r24
 4a0:	84 23       	and	r24, r20
 4a2:	88 bb       	out	0x18, r24	; 24
 4a4:	08 95       	ret
			}else if(VAL==HIGH){
 4a6:	41 30       	cpi	r20, 0x01	; 1
 4a8:	09 f0       	breq	.+2      	; 0x4ac <DIO_WRITE+0x80>
 4aa:	4a c0       	rjmp	.+148    	; 0x540 <DIO_WRITE+0x114>
			PORTB |= (1<<PINNO);
 4ac:	48 b3       	in	r20, 0x18	; 24
 4ae:	21 e0       	ldi	r18, 0x01	; 1
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	b9 01       	movw	r22, r18
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <DIO_WRITE+0x8e>
 4b6:	66 0f       	add	r22, r22
 4b8:	77 1f       	adc	r23, r23
 4ba:	8a 95       	dec	r24
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <DIO_WRITE+0x8a>
 4be:	cb 01       	movw	r24, r22
 4c0:	84 2b       	or	r24, r20
 4c2:	88 bb       	out	0x18, r24	; 24
 4c4:	08 95       	ret
			//error handling
		}
		
		break;
		case PORT_C:
		if(VAL==LOW){
 4c6:	41 11       	cpse	r20, r1
 4c8:	0e c0       	rjmp	.+28     	; 0x4e6 <DIO_WRITE+0xba>
			PORTC &= ~(1<<PINNO);
 4ca:	45 b3       	in	r20, 0x15	; 21
 4cc:	21 e0       	ldi	r18, 0x01	; 1
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	b9 01       	movw	r22, r18
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_WRITE+0xac>
 4d4:	66 0f       	add	r22, r22
 4d6:	77 1f       	adc	r23, r23
 4d8:	8a 95       	dec	r24
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_WRITE+0xa8>
 4dc:	cb 01       	movw	r24, r22
 4de:	80 95       	com	r24
 4e0:	84 23       	and	r24, r20
 4e2:	85 bb       	out	0x15, r24	; 21
 4e4:	08 95       	ret
			}else if(VAL==HIGH){
 4e6:	41 30       	cpi	r20, 0x01	; 1
 4e8:	59 f5       	brne	.+86     	; 0x540 <DIO_WRITE+0x114>
			PORTC |= (1<<PINNO);
 4ea:	45 b3       	in	r20, 0x15	; 21
 4ec:	21 e0       	ldi	r18, 0x01	; 1
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	b9 01       	movw	r22, r18
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_WRITE+0xcc>
 4f4:	66 0f       	add	r22, r22
 4f6:	77 1f       	adc	r23, r23
 4f8:	8a 95       	dec	r24
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_WRITE+0xc8>
 4fc:	cb 01       	movw	r24, r22
 4fe:	84 2b       	or	r24, r20
 500:	85 bb       	out	0x15, r24	; 21
 502:	08 95       	ret
			}else{
			//error handling
		}
		break;
		case PORT_D:
		if(VAL==LOW){
 504:	41 11       	cpse	r20, r1
 506:	0e c0       	rjmp	.+28     	; 0x524 <DIO_WRITE+0xf8>
			PORTD &= ~(1<<PINNO);
 508:	42 b3       	in	r20, 0x12	; 18
 50a:	21 e0       	ldi	r18, 0x01	; 1
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	b9 01       	movw	r22, r18
 510:	02 c0       	rjmp	.+4      	; 0x516 <DIO_WRITE+0xea>
 512:	66 0f       	add	r22, r22
 514:	77 1f       	adc	r23, r23
 516:	8a 95       	dec	r24
 518:	e2 f7       	brpl	.-8      	; 0x512 <DIO_WRITE+0xe6>
 51a:	cb 01       	movw	r24, r22
 51c:	80 95       	com	r24
 51e:	84 23       	and	r24, r20
 520:	82 bb       	out	0x12, r24	; 18
 522:	08 95       	ret
		}
		else if(VAL==HIGH)
 524:	41 30       	cpi	r20, 0x01	; 1
 526:	61 f4       	brne	.+24     	; 0x540 <DIO_WRITE+0x114>
		{
			PORTD |= (1<<PINNO);
 528:	42 b3       	in	r20, 0x12	; 18
 52a:	21 e0       	ldi	r18, 0x01	; 1
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	b9 01       	movw	r22, r18
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_WRITE+0x10a>
 532:	66 0f       	add	r22, r22
 534:	77 1f       	adc	r23, r23
 536:	8a 95       	dec	r24
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_WRITE+0x106>
 53a:	cb 01       	movw	r24, r22
 53c:	84 2b       	or	r24, r20
 53e:	82 bb       	out	0x12, r24	; 18
 540:	08 95       	ret

00000542 <DIO_TOGGLE>:
		break;
	}
	
}
void DIO_TOGGLE(Uint8 PINNO,Uint8 PORTNO ){
	switch(PORTNO){
 542:	62 34       	cpi	r22, 0x42	; 66
 544:	b1 f0       	breq	.+44     	; 0x572 <DIO_TOGGLE+0x30>
 546:	18 f4       	brcc	.+6      	; 0x54e <DIO_TOGGLE+0xc>
 548:	61 34       	cpi	r22, 0x41	; 65
 54a:	31 f0       	breq	.+12     	; 0x558 <DIO_TOGGLE+0x16>
 54c:	08 95       	ret
 54e:	63 34       	cpi	r22, 0x43	; 67
 550:	e9 f0       	breq	.+58     	; 0x58c <DIO_TOGGLE+0x4a>
 552:	64 34       	cpi	r22, 0x44	; 68
 554:	41 f1       	breq	.+80     	; 0x5a6 <DIO_TOGGLE+0x64>
 556:	08 95       	ret
	case PORT_A:
	PORTA^=(1<<PINNO);
 558:	4b b3       	in	r20, 0x1b	; 27
 55a:	21 e0       	ldi	r18, 0x01	; 1
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	b9 01       	movw	r22, r18
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_TOGGLE+0x24>
 562:	66 0f       	add	r22, r22
 564:	77 1f       	adc	r23, r23
 566:	8a 95       	dec	r24
 568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_TOGGLE+0x20>
 56a:	cb 01       	movw	r24, r22
 56c:	84 27       	eor	r24, r20
 56e:	8b bb       	out	0x1b, r24	; 27

	break;
 570:	08 95       	ret
	case PORT_B:
	PORTB^=(1<<PINNO);
 572:	48 b3       	in	r20, 0x18	; 24
 574:	21 e0       	ldi	r18, 0x01	; 1
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	b9 01       	movw	r22, r18
 57a:	02 c0       	rjmp	.+4      	; 0x580 <DIO_TOGGLE+0x3e>
 57c:	66 0f       	add	r22, r22
 57e:	77 1f       	adc	r23, r23
 580:	8a 95       	dec	r24
 582:	e2 f7       	brpl	.-8      	; 0x57c <DIO_TOGGLE+0x3a>
 584:	cb 01       	movw	r24, r22
 586:	84 27       	eor	r24, r20
 588:	88 bb       	out	0x18, r24	; 24
	
	break;
 58a:	08 95       	ret
	case PORT_C:
	PORTC^=(1<<PINNO);
 58c:	45 b3       	in	r20, 0x15	; 21
 58e:	21 e0       	ldi	r18, 0x01	; 1
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	b9 01       	movw	r22, r18
 594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_TOGGLE+0x58>
 596:	66 0f       	add	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	8a 95       	dec	r24
 59c:	e2 f7       	brpl	.-8      	; 0x596 <DIO_TOGGLE+0x54>
 59e:	cb 01       	movw	r24, r22
 5a0:	84 27       	eor	r24, r20
 5a2:	85 bb       	out	0x15, r24	; 21
	
	break;
 5a4:	08 95       	ret
	case PORT_D:
	PORTD^=(1<<PINNO);
 5a6:	42 b3       	in	r20, 0x12	; 18
 5a8:	21 e0       	ldi	r18, 0x01	; 1
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	b9 01       	movw	r22, r18
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_TOGGLE+0x72>
 5b0:	66 0f       	add	r22, r22
 5b2:	77 1f       	adc	r23, r23
 5b4:	8a 95       	dec	r24
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_TOGGLE+0x6e>
 5b8:	cb 01       	movw	r24, r22
 5ba:	84 27       	eor	r24, r20
 5bc:	82 bb       	out	0x12, r24	; 18
 5be:	08 95       	ret

000005c0 <TIMER_init>:
#include "Timer.h"
#include "../../STD.h"
#include "../../BITMATH.h"

void TIMER_init(){
	TCCR0 = 0x00; //normal mode
 5c0:	13 be       	out	0x33, r1	; 51
 5c2:	08 95       	ret

000005c4 <TIMER_delay>:
}
void TIMER_delay(Uint16 millisec){
 5c4:	8f 92       	push	r8
 5c6:	9f 92       	push	r9
 5c8:	af 92       	push	r10
 5ca:	bf 92       	push	r11
 5cc:	cf 92       	push	r12
 5ce:	df 92       	push	r13
 5d0:	ef 92       	push	r14
 5d2:	ff 92       	push	r15
 5d4:	cf 93       	push	r28
 5d6:	df 93       	push	r29
 5d8:	ec 01       	movw	r28, r24
	Uint32 overFlowcnt=0;
	Uint16 Noverflows,TimerInitial;
	double Tmaxdelay,Ttick;
	Ttick = 256.0/1000.0; //ms    Ttick = Prescaler/FCPU
	Tmaxdelay= 65.536; //ms		Tmaxdelay = Ttick * 2^8
	if(millisec<Tmaxdelay){
 5da:	bc 01       	movw	r22, r24
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	0e 94 94 04 	call	0x928	; 0x928 <__floatunsisf>
 5e4:	6b 01       	movw	r12, r22
 5e6:	7c 01       	movw	r14, r24
 5e8:	2f e6       	ldi	r18, 0x6F	; 111
 5ea:	32 e1       	ldi	r19, 0x12	; 18
 5ec:	43 e8       	ldi	r20, 0x83	; 131
 5ee:	52 e4       	ldi	r21, 0x42	; 66
 5f0:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__cmpsf2>
 5f4:	88 23       	and	r24, r24
 5f6:	9c f4       	brge	.+38     	; 0x61e <TIMER_delay+0x5a>
		TimerInitial = (Tmaxdelay-millisec)/Ttick;
 5f8:	a7 01       	movw	r20, r14
 5fa:	96 01       	movw	r18, r12
 5fc:	6f e6       	ldi	r22, 0x6F	; 111
 5fe:	72 e1       	ldi	r23, 0x12	; 18
 600:	83 e8       	ldi	r24, 0x83	; 131
 602:	92 e4       	ldi	r25, 0x42	; 66
 604:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__subsf3>
 608:	2f e6       	ldi	r18, 0x6F	; 111
 60a:	32 e1       	ldi	r19, 0x12	; 18
 60c:	43 e8       	ldi	r20, 0x83	; 131
 60e:	5e e3       	ldi	r21, 0x3E	; 62
 610:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__divsf3>
 614:	0e 94 65 04 	call	0x8ca	; 0x8ca <__fixunssfsi>
		Noverflows = 1;
 618:	c1 e0       	ldi	r28, 0x01	; 1
 61a:	d0 e0       	ldi	r29, 0x00	; 0
 61c:	35 c0       	rjmp	.+106    	; 0x688 <TIMER_delay+0xc4>
		
		}else if(millisec == (int)Tmaxdelay){
 61e:	c1 34       	cpi	r28, 0x41	; 65
 620:	d1 05       	cpc	r29, r1
 622:	79 f1       	breq	.+94     	; 0x682 <TIMER_delay+0xbe>
		TimerInitial=0;
		Noverflows=1;
		}else{
		Noverflows = ceil((double)millisec/Tmaxdelay);
 624:	2f e6       	ldi	r18, 0x6F	; 111
 626:	32 e1       	ldi	r19, 0x12	; 18
 628:	43 e8       	ldi	r20, 0x83	; 131
 62a:	52 e4       	ldi	r21, 0x42	; 66
 62c:	c7 01       	movw	r24, r14
 62e:	b6 01       	movw	r22, r12
 630:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__divsf3>
 634:	0e 94 d7 03 	call	0x7ae	; 0x7ae <ceil>
 638:	0e 94 65 04 	call	0x8ca	; 0x8ca <__fixunssfsi>
 63c:	4b 01       	movw	r8, r22
 63e:	5c 01       	movw	r10, r24
 640:	eb 01       	movw	r28, r22
		TimerInitial = (1<<8) - ((double)millisec/Ttick)/Noverflows;
 642:	2f e6       	ldi	r18, 0x6F	; 111
 644:	32 e1       	ldi	r19, 0x12	; 18
 646:	43 e8       	ldi	r20, 0x83	; 131
 648:	5e e3       	ldi	r21, 0x3E	; 62
 64a:	c7 01       	movw	r24, r14
 64c:	b6 01       	movw	r22, r12
 64e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__divsf3>
 652:	6b 01       	movw	r12, r22
 654:	7c 01       	movw	r14, r24
 656:	b4 01       	movw	r22, r8
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	0e 94 94 04 	call	0x928	; 0x928 <__floatunsisf>
 660:	9b 01       	movw	r18, r22
 662:	ac 01       	movw	r20, r24
 664:	c7 01       	movw	r24, r14
 666:	b6 01       	movw	r22, r12
 668:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__divsf3>
 66c:	9b 01       	movw	r18, r22
 66e:	ac 01       	movw	r20, r24
 670:	60 e0       	ldi	r22, 0x00	; 0
 672:	70 e0       	ldi	r23, 0x00	; 0
 674:	80 e8       	ldi	r24, 0x80	; 128
 676:	93 e4       	ldi	r25, 0x43	; 67
 678:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__subsf3>
 67c:	0e 94 65 04 	call	0x8ca	; 0x8ca <__fixunssfsi>
 680:	03 c0       	rjmp	.+6      	; 0x688 <TIMER_delay+0xc4>
	if(millisec<Tmaxdelay){
		TimerInitial = (Tmaxdelay-millisec)/Ttick;
		Noverflows = 1;
		
		}else if(millisec == (int)Tmaxdelay){
		TimerInitial=0;
 682:	60 e0       	ldi	r22, 0x00	; 0
		Noverflows=1;
 684:	c1 e0       	ldi	r28, 0x01	; 1
 686:	d0 e0       	ldi	r29, 0x00	; 0
		}else{
		Noverflows = ceil((double)millisec/Tmaxdelay);
		TimerInitial = (1<<8) - ((double)millisec/Ttick)/Noverflows;
		
	}
	TCNT0 = TimerInitial;
 688:	62 bf       	out	0x32, r22	; 50
	TCCR0 |= (1<<2); //set 256 prescaler
 68a:	83 b7       	in	r24, 0x33	; 51
 68c:	84 60       	ori	r24, 0x04	; 4
 68e:	83 bf       	out	0x33, r24	; 51

void TIMER_init(){
	TCCR0 = 0x00; //normal mode
}
void TIMER_delay(Uint16 millisec){
	Uint32 overFlowcnt=0;
 690:	40 e0       	ldi	r20, 0x00	; 0
 692:	50 e0       	ldi	r21, 0x00	; 0
 694:	ba 01       	movw	r22, r20
		TimerInitial = (1<<8) - ((double)millisec/Ttick)/Noverflows;
		
	}
	TCNT0 = TimerInitial;
	TCCR0 |= (1<<2); //set 256 prescaler
	while(overFlowcnt<Noverflows){
 696:	0a c0       	rjmp	.+20     	; 0x6ac <TIMER_delay+0xe8>
		//busy wait
		while(READ_BIT(TIFR,0)==0);
 698:	08 b6       	in	r0, 0x38	; 56
 69a:	00 fe       	sbrs	r0, 0
 69c:	fd cf       	rjmp	.-6      	; 0x698 <TIMER_delay+0xd4>
		//clear overflow flag
		SET_BIT(TIFR,0);
 69e:	88 b7       	in	r24, 0x38	; 56
 6a0:	81 60       	ori	r24, 0x01	; 1
 6a2:	88 bf       	out	0x38, r24	; 56
		//increment counter
		overFlowcnt++;
 6a4:	4f 5f       	subi	r20, 0xFF	; 255
 6a6:	5f 4f       	sbci	r21, 0xFF	; 255
 6a8:	6f 4f       	sbci	r22, 0xFF	; 255
 6aa:	7f 4f       	sbci	r23, 0xFF	; 255
		TimerInitial = (1<<8) - ((double)millisec/Ttick)/Noverflows;
		
	}
	TCNT0 = TimerInitial;
	TCCR0 |= (1<<2); //set 256 prescaler
	while(overFlowcnt<Noverflows){
 6ac:	ce 01       	movw	r24, r28
 6ae:	a0 e0       	ldi	r26, 0x00	; 0
 6b0:	b0 e0       	ldi	r27, 0x00	; 0
 6b2:	48 17       	cp	r20, r24
 6b4:	59 07       	cpc	r21, r25
 6b6:	6a 07       	cpc	r22, r26
 6b8:	7b 07       	cpc	r23, r27
 6ba:	70 f3       	brcs	.-36     	; 0x698 <TIMER_delay+0xd4>
		SET_BIT(TIFR,0);
		//increment counter
		overFlowcnt++;
	}
	//Timer stop
	TCCR0 = 0x00;
 6bc:	13 be       	out	0x33, r1	; 51
}
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	ff 90       	pop	r15
 6c4:	ef 90       	pop	r14
 6c6:	df 90       	pop	r13
 6c8:	cf 90       	pop	r12
 6ca:	bf 90       	pop	r11
 6cc:	af 90       	pop	r10
 6ce:	9f 90       	pop	r9
 6d0:	8f 90       	pop	r8
 6d2:	08 95       	ret

000006d4 <__subsf3>:
 6d4:	50 58       	subi	r21, 0x80	; 128

000006d6 <__addsf3>:
 6d6:	bb 27       	eor	r27, r27
 6d8:	aa 27       	eor	r26, r26
 6da:	0e 94 82 03 	call	0x704	; 0x704 <__addsf3x>
 6de:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__fp_round>
 6e2:	0e 94 27 05 	call	0xa4e	; 0xa4e <__fp_pscA>
 6e6:	38 f0       	brcs	.+14     	; 0x6f6 <__addsf3+0x20>
 6e8:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fp_pscB>
 6ec:	20 f0       	brcs	.+8      	; 0x6f6 <__addsf3+0x20>
 6ee:	39 f4       	brne	.+14     	; 0x6fe <__addsf3+0x28>
 6f0:	9f 3f       	cpi	r25, 0xFF	; 255
 6f2:	19 f4       	brne	.+6      	; 0x6fa <__addsf3+0x24>
 6f4:	26 f4       	brtc	.+8      	; 0x6fe <__addsf3+0x28>
 6f6:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__fp_nan>
 6fa:	0e f4       	brtc	.+2      	; 0x6fe <__addsf3+0x28>
 6fc:	e0 95       	com	r30
 6fe:	e7 fb       	bst	r30, 7
 700:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__fp_inf>

00000704 <__addsf3x>:
 704:	e9 2f       	mov	r30, r25
 706:	0e 94 46 05 	call	0xa8c	; 0xa8c <__fp_split3>
 70a:	58 f3       	brcs	.-42     	; 0x6e2 <__addsf3+0xc>
 70c:	ba 17       	cp	r27, r26
 70e:	62 07       	cpc	r22, r18
 710:	73 07       	cpc	r23, r19
 712:	84 07       	cpc	r24, r20
 714:	95 07       	cpc	r25, r21
 716:	20 f0       	brcs	.+8      	; 0x720 <__addsf3x+0x1c>
 718:	79 f4       	brne	.+30     	; 0x738 <__addsf3x+0x34>
 71a:	a6 f5       	brtc	.+104    	; 0x784 <__addsf3x+0x80>
 71c:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__fp_zero>
 720:	0e f4       	brtc	.+2      	; 0x724 <__addsf3x+0x20>
 722:	e0 95       	com	r30
 724:	0b 2e       	mov	r0, r27
 726:	ba 2f       	mov	r27, r26
 728:	a0 2d       	mov	r26, r0
 72a:	0b 01       	movw	r0, r22
 72c:	b9 01       	movw	r22, r18
 72e:	90 01       	movw	r18, r0
 730:	0c 01       	movw	r0, r24
 732:	ca 01       	movw	r24, r20
 734:	a0 01       	movw	r20, r0
 736:	11 24       	eor	r1, r1
 738:	ff 27       	eor	r31, r31
 73a:	59 1b       	sub	r21, r25
 73c:	99 f0       	breq	.+38     	; 0x764 <__addsf3x+0x60>
 73e:	59 3f       	cpi	r21, 0xF9	; 249
 740:	50 f4       	brcc	.+20     	; 0x756 <__addsf3x+0x52>
 742:	50 3e       	cpi	r21, 0xE0	; 224
 744:	68 f1       	brcs	.+90     	; 0x7a0 <__addsf3x+0x9c>
 746:	1a 16       	cp	r1, r26
 748:	f0 40       	sbci	r31, 0x00	; 0
 74a:	a2 2f       	mov	r26, r18
 74c:	23 2f       	mov	r18, r19
 74e:	34 2f       	mov	r19, r20
 750:	44 27       	eor	r20, r20
 752:	58 5f       	subi	r21, 0xF8	; 248
 754:	f3 cf       	rjmp	.-26     	; 0x73c <__addsf3x+0x38>
 756:	46 95       	lsr	r20
 758:	37 95       	ror	r19
 75a:	27 95       	ror	r18
 75c:	a7 95       	ror	r26
 75e:	f0 40       	sbci	r31, 0x00	; 0
 760:	53 95       	inc	r21
 762:	c9 f7       	brne	.-14     	; 0x756 <__addsf3x+0x52>
 764:	7e f4       	brtc	.+30     	; 0x784 <__addsf3x+0x80>
 766:	1f 16       	cp	r1, r31
 768:	ba 0b       	sbc	r27, r26
 76a:	62 0b       	sbc	r22, r18
 76c:	73 0b       	sbc	r23, r19
 76e:	84 0b       	sbc	r24, r20
 770:	ba f0       	brmi	.+46     	; 0x7a0 <__addsf3x+0x9c>
 772:	91 50       	subi	r25, 0x01	; 1
 774:	a1 f0       	breq	.+40     	; 0x79e <__addsf3x+0x9a>
 776:	ff 0f       	add	r31, r31
 778:	bb 1f       	adc	r27, r27
 77a:	66 1f       	adc	r22, r22
 77c:	77 1f       	adc	r23, r23
 77e:	88 1f       	adc	r24, r24
 780:	c2 f7       	brpl	.-16     	; 0x772 <__addsf3x+0x6e>
 782:	0e c0       	rjmp	.+28     	; 0x7a0 <__addsf3x+0x9c>
 784:	ba 0f       	add	r27, r26
 786:	62 1f       	adc	r22, r18
 788:	73 1f       	adc	r23, r19
 78a:	84 1f       	adc	r24, r20
 78c:	48 f4       	brcc	.+18     	; 0x7a0 <__addsf3x+0x9c>
 78e:	87 95       	ror	r24
 790:	77 95       	ror	r23
 792:	67 95       	ror	r22
 794:	b7 95       	ror	r27
 796:	f7 95       	ror	r31
 798:	9e 3f       	cpi	r25, 0xFE	; 254
 79a:	08 f0       	brcs	.+2      	; 0x79e <__addsf3x+0x9a>
 79c:	b0 cf       	rjmp	.-160    	; 0x6fe <__addsf3+0x28>
 79e:	93 95       	inc	r25
 7a0:	88 0f       	add	r24, r24
 7a2:	08 f0       	brcs	.+2      	; 0x7a6 <__addsf3x+0xa2>
 7a4:	99 27       	eor	r25, r25
 7a6:	ee 0f       	add	r30, r30
 7a8:	97 95       	ror	r25
 7aa:	87 95       	ror	r24
 7ac:	08 95       	ret

000007ae <ceil>:
 7ae:	0e 94 68 05 	call	0xad0	; 0xad0 <__fp_trunc>
 7b2:	90 f0       	brcs	.+36     	; 0x7d8 <ceil+0x2a>
 7b4:	9f 37       	cpi	r25, 0x7F	; 127
 7b6:	48 f4       	brcc	.+18     	; 0x7ca <ceil+0x1c>
 7b8:	91 11       	cpse	r25, r1
 7ba:	16 f4       	brtc	.+4      	; 0x7c0 <ceil+0x12>
 7bc:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_szero>
 7c0:	60 e0       	ldi	r22, 0x00	; 0
 7c2:	70 e0       	ldi	r23, 0x00	; 0
 7c4:	80 e8       	ldi	r24, 0x80	; 128
 7c6:	9f e3       	ldi	r25, 0x3F	; 63
 7c8:	08 95       	ret
 7ca:	26 f0       	brts	.+8      	; 0x7d4 <ceil+0x26>
 7cc:	1b 16       	cp	r1, r27
 7ce:	61 1d       	adc	r22, r1
 7d0:	71 1d       	adc	r23, r1
 7d2:	81 1d       	adc	r24, r1
 7d4:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <__fp_mintl>
 7d8:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__fp_mpack>

000007dc <__cmpsf2>:
 7dc:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__fp_cmp>
 7e0:	08 f4       	brcc	.+2      	; 0x7e4 <__cmpsf2+0x8>
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	08 95       	ret

000007e6 <__divsf3>:
 7e6:	0e 94 07 04 	call	0x80e	; 0x80e <__divsf3x>
 7ea:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__fp_round>
 7ee:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fp_pscB>
 7f2:	58 f0       	brcs	.+22     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7f4:	0e 94 27 05 	call	0xa4e	; 0xa4e <__fp_pscA>
 7f8:	40 f0       	brcs	.+16     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7fa:	29 f4       	brne	.+10     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7fc:	5f 3f       	cpi	r21, 0xFF	; 255
 7fe:	29 f0       	breq	.+10     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 800:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__fp_inf>
 804:	51 11       	cpse	r21, r1
 806:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_szero>
 80a:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__fp_nan>

0000080e <__divsf3x>:
 80e:	0e 94 46 05 	call	0xa8c	; 0xa8c <__fp_split3>
 812:	68 f3       	brcs	.-38     	; 0x7ee <__divsf3+0x8>

00000814 <__divsf3_pse>:
 814:	99 23       	and	r25, r25
 816:	b1 f3       	breq	.-20     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 818:	55 23       	and	r21, r21
 81a:	91 f3       	breq	.-28     	; 0x800 <__DATA_REGION_LENGTH__>
 81c:	95 1b       	sub	r25, r21
 81e:	55 0b       	sbc	r21, r21
 820:	bb 27       	eor	r27, r27
 822:	aa 27       	eor	r26, r26
 824:	62 17       	cp	r22, r18
 826:	73 07       	cpc	r23, r19
 828:	84 07       	cpc	r24, r20
 82a:	38 f0       	brcs	.+14     	; 0x83a <__divsf3_pse+0x26>
 82c:	9f 5f       	subi	r25, 0xFF	; 255
 82e:	5f 4f       	sbci	r21, 0xFF	; 255
 830:	22 0f       	add	r18, r18
 832:	33 1f       	adc	r19, r19
 834:	44 1f       	adc	r20, r20
 836:	aa 1f       	adc	r26, r26
 838:	a9 f3       	breq	.-22     	; 0x824 <__divsf3_pse+0x10>
 83a:	35 d0       	rcall	.+106    	; 0x8a6 <__stack+0x47>
 83c:	0e 2e       	mov	r0, r30
 83e:	3a f0       	brmi	.+14     	; 0x84e <__divsf3_pse+0x3a>
 840:	e0 e8       	ldi	r30, 0x80	; 128
 842:	32 d0       	rcall	.+100    	; 0x8a8 <__stack+0x49>
 844:	91 50       	subi	r25, 0x01	; 1
 846:	50 40       	sbci	r21, 0x00	; 0
 848:	e6 95       	lsr	r30
 84a:	00 1c       	adc	r0, r0
 84c:	ca f7       	brpl	.-14     	; 0x840 <__divsf3_pse+0x2c>
 84e:	2b d0       	rcall	.+86     	; 0x8a6 <__stack+0x47>
 850:	fe 2f       	mov	r31, r30
 852:	29 d0       	rcall	.+82     	; 0x8a6 <__stack+0x47>
 854:	66 0f       	add	r22, r22
 856:	77 1f       	adc	r23, r23
 858:	88 1f       	adc	r24, r24
 85a:	bb 1f       	adc	r27, r27
 85c:	26 17       	cp	r18, r22
 85e:	37 07       	cpc	r19, r23
 860:	48 07       	cpc	r20, r24
 862:	ab 07       	cpc	r26, r27
 864:	b0 e8       	ldi	r27, 0x80	; 128
 866:	09 f0       	breq	.+2      	; 0x86a <__stack+0xb>
 868:	bb 0b       	sbc	r27, r27
 86a:	80 2d       	mov	r24, r0
 86c:	bf 01       	movw	r22, r30
 86e:	ff 27       	eor	r31, r31
 870:	93 58       	subi	r25, 0x83	; 131
 872:	5f 4f       	sbci	r21, 0xFF	; 255
 874:	3a f0       	brmi	.+14     	; 0x884 <__stack+0x25>
 876:	9e 3f       	cpi	r25, 0xFE	; 254
 878:	51 05       	cpc	r21, r1
 87a:	78 f0       	brcs	.+30     	; 0x89a <__stack+0x3b>
 87c:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__fp_inf>
 880:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_szero>
 884:	5f 3f       	cpi	r21, 0xFF	; 255
 886:	e4 f3       	brlt	.-8      	; 0x880 <__stack+0x21>
 888:	98 3e       	cpi	r25, 0xE8	; 232
 88a:	d4 f3       	brlt	.-12     	; 0x880 <__stack+0x21>
 88c:	86 95       	lsr	r24
 88e:	77 95       	ror	r23
 890:	67 95       	ror	r22
 892:	b7 95       	ror	r27
 894:	f7 95       	ror	r31
 896:	9f 5f       	subi	r25, 0xFF	; 255
 898:	c9 f7       	brne	.-14     	; 0x88c <__stack+0x2d>
 89a:	88 0f       	add	r24, r24
 89c:	91 1d       	adc	r25, r1
 89e:	96 95       	lsr	r25
 8a0:	87 95       	ror	r24
 8a2:	97 f9       	bld	r25, 7
 8a4:	08 95       	ret
 8a6:	e1 e0       	ldi	r30, 0x01	; 1
 8a8:	66 0f       	add	r22, r22
 8aa:	77 1f       	adc	r23, r23
 8ac:	88 1f       	adc	r24, r24
 8ae:	bb 1f       	adc	r27, r27
 8b0:	62 17       	cp	r22, r18
 8b2:	73 07       	cpc	r23, r19
 8b4:	84 07       	cpc	r24, r20
 8b6:	ba 07       	cpc	r27, r26
 8b8:	20 f0       	brcs	.+8      	; 0x8c2 <__stack+0x63>
 8ba:	62 1b       	sub	r22, r18
 8bc:	73 0b       	sbc	r23, r19
 8be:	84 0b       	sbc	r24, r20
 8c0:	ba 0b       	sbc	r27, r26
 8c2:	ee 1f       	adc	r30, r30
 8c4:	88 f7       	brcc	.-30     	; 0x8a8 <__stack+0x49>
 8c6:	e0 95       	com	r30
 8c8:	08 95       	ret

000008ca <__fixunssfsi>:
 8ca:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_splitA>
 8ce:	88 f0       	brcs	.+34     	; 0x8f2 <__fixunssfsi+0x28>
 8d0:	9f 57       	subi	r25, 0x7F	; 127
 8d2:	98 f0       	brcs	.+38     	; 0x8fa <__fixunssfsi+0x30>
 8d4:	b9 2f       	mov	r27, r25
 8d6:	99 27       	eor	r25, r25
 8d8:	b7 51       	subi	r27, 0x17	; 23
 8da:	b0 f0       	brcs	.+44     	; 0x908 <__fixunssfsi+0x3e>
 8dc:	e1 f0       	breq	.+56     	; 0x916 <__fixunssfsi+0x4c>
 8de:	66 0f       	add	r22, r22
 8e0:	77 1f       	adc	r23, r23
 8e2:	88 1f       	adc	r24, r24
 8e4:	99 1f       	adc	r25, r25
 8e6:	1a f0       	brmi	.+6      	; 0x8ee <__fixunssfsi+0x24>
 8e8:	ba 95       	dec	r27
 8ea:	c9 f7       	brne	.-14     	; 0x8de <__fixunssfsi+0x14>
 8ec:	14 c0       	rjmp	.+40     	; 0x916 <__fixunssfsi+0x4c>
 8ee:	b1 30       	cpi	r27, 0x01	; 1
 8f0:	91 f0       	breq	.+36     	; 0x916 <__fixunssfsi+0x4c>
 8f2:	0e 94 80 05 	call	0xb00	; 0xb00 <__fp_zero>
 8f6:	b1 e0       	ldi	r27, 0x01	; 1
 8f8:	08 95       	ret
 8fa:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__fp_zero>
 8fe:	67 2f       	mov	r22, r23
 900:	78 2f       	mov	r23, r24
 902:	88 27       	eor	r24, r24
 904:	b8 5f       	subi	r27, 0xF8	; 248
 906:	39 f0       	breq	.+14     	; 0x916 <__fixunssfsi+0x4c>
 908:	b9 3f       	cpi	r27, 0xF9	; 249
 90a:	cc f3       	brlt	.-14     	; 0x8fe <__fixunssfsi+0x34>
 90c:	86 95       	lsr	r24
 90e:	77 95       	ror	r23
 910:	67 95       	ror	r22
 912:	b3 95       	inc	r27
 914:	d9 f7       	brne	.-10     	; 0x90c <__fixunssfsi+0x42>
 916:	3e f4       	brtc	.+14     	; 0x926 <__fixunssfsi+0x5c>
 918:	90 95       	com	r25
 91a:	80 95       	com	r24
 91c:	70 95       	com	r23
 91e:	61 95       	neg	r22
 920:	7f 4f       	sbci	r23, 0xFF	; 255
 922:	8f 4f       	sbci	r24, 0xFF	; 255
 924:	9f 4f       	sbci	r25, 0xFF	; 255
 926:	08 95       	ret

00000928 <__floatunsisf>:
 928:	e8 94       	clt
 92a:	09 c0       	rjmp	.+18     	; 0x93e <__floatsisf+0x12>

0000092c <__floatsisf>:
 92c:	97 fb       	bst	r25, 7
 92e:	3e f4       	brtc	.+14     	; 0x93e <__floatsisf+0x12>
 930:	90 95       	com	r25
 932:	80 95       	com	r24
 934:	70 95       	com	r23
 936:	61 95       	neg	r22
 938:	7f 4f       	sbci	r23, 0xFF	; 255
 93a:	8f 4f       	sbci	r24, 0xFF	; 255
 93c:	9f 4f       	sbci	r25, 0xFF	; 255
 93e:	99 23       	and	r25, r25
 940:	a9 f0       	breq	.+42     	; 0x96c <__floatsisf+0x40>
 942:	f9 2f       	mov	r31, r25
 944:	96 e9       	ldi	r25, 0x96	; 150
 946:	bb 27       	eor	r27, r27
 948:	93 95       	inc	r25
 94a:	f6 95       	lsr	r31
 94c:	87 95       	ror	r24
 94e:	77 95       	ror	r23
 950:	67 95       	ror	r22
 952:	b7 95       	ror	r27
 954:	f1 11       	cpse	r31, r1
 956:	f8 cf       	rjmp	.-16     	; 0x948 <__floatsisf+0x1c>
 958:	fa f4       	brpl	.+62     	; 0x998 <__floatsisf+0x6c>
 95a:	bb 0f       	add	r27, r27
 95c:	11 f4       	brne	.+4      	; 0x962 <__floatsisf+0x36>
 95e:	60 ff       	sbrs	r22, 0
 960:	1b c0       	rjmp	.+54     	; 0x998 <__floatsisf+0x6c>
 962:	6f 5f       	subi	r22, 0xFF	; 255
 964:	7f 4f       	sbci	r23, 0xFF	; 255
 966:	8f 4f       	sbci	r24, 0xFF	; 255
 968:	9f 4f       	sbci	r25, 0xFF	; 255
 96a:	16 c0       	rjmp	.+44     	; 0x998 <__floatsisf+0x6c>
 96c:	88 23       	and	r24, r24
 96e:	11 f0       	breq	.+4      	; 0x974 <__floatsisf+0x48>
 970:	96 e9       	ldi	r25, 0x96	; 150
 972:	11 c0       	rjmp	.+34     	; 0x996 <__floatsisf+0x6a>
 974:	77 23       	and	r23, r23
 976:	21 f0       	breq	.+8      	; 0x980 <__floatsisf+0x54>
 978:	9e e8       	ldi	r25, 0x8E	; 142
 97a:	87 2f       	mov	r24, r23
 97c:	76 2f       	mov	r23, r22
 97e:	05 c0       	rjmp	.+10     	; 0x98a <__floatsisf+0x5e>
 980:	66 23       	and	r22, r22
 982:	71 f0       	breq	.+28     	; 0x9a0 <__floatsisf+0x74>
 984:	96 e8       	ldi	r25, 0x86	; 134
 986:	86 2f       	mov	r24, r22
 988:	70 e0       	ldi	r23, 0x00	; 0
 98a:	60 e0       	ldi	r22, 0x00	; 0
 98c:	2a f0       	brmi	.+10     	; 0x998 <__floatsisf+0x6c>
 98e:	9a 95       	dec	r25
 990:	66 0f       	add	r22, r22
 992:	77 1f       	adc	r23, r23
 994:	88 1f       	adc	r24, r24
 996:	da f7       	brpl	.-10     	; 0x98e <__floatsisf+0x62>
 998:	88 0f       	add	r24, r24
 99a:	96 95       	lsr	r25
 99c:	87 95       	ror	r24
 99e:	97 f9       	bld	r25, 7
 9a0:	08 95       	ret

000009a2 <__fp_cmp>:
 9a2:	99 0f       	add	r25, r25
 9a4:	00 08       	sbc	r0, r0
 9a6:	55 0f       	add	r21, r21
 9a8:	aa 0b       	sbc	r26, r26
 9aa:	e0 e8       	ldi	r30, 0x80	; 128
 9ac:	fe ef       	ldi	r31, 0xFE	; 254
 9ae:	16 16       	cp	r1, r22
 9b0:	17 06       	cpc	r1, r23
 9b2:	e8 07       	cpc	r30, r24
 9b4:	f9 07       	cpc	r31, r25
 9b6:	c0 f0       	brcs	.+48     	; 0x9e8 <__fp_cmp+0x46>
 9b8:	12 16       	cp	r1, r18
 9ba:	13 06       	cpc	r1, r19
 9bc:	e4 07       	cpc	r30, r20
 9be:	f5 07       	cpc	r31, r21
 9c0:	98 f0       	brcs	.+38     	; 0x9e8 <__fp_cmp+0x46>
 9c2:	62 1b       	sub	r22, r18
 9c4:	73 0b       	sbc	r23, r19
 9c6:	84 0b       	sbc	r24, r20
 9c8:	95 0b       	sbc	r25, r21
 9ca:	39 f4       	brne	.+14     	; 0x9da <__fp_cmp+0x38>
 9cc:	0a 26       	eor	r0, r26
 9ce:	61 f0       	breq	.+24     	; 0x9e8 <__fp_cmp+0x46>
 9d0:	23 2b       	or	r18, r19
 9d2:	24 2b       	or	r18, r20
 9d4:	25 2b       	or	r18, r21
 9d6:	21 f4       	brne	.+8      	; 0x9e0 <__fp_cmp+0x3e>
 9d8:	08 95       	ret
 9da:	0a 26       	eor	r0, r26
 9dc:	09 f4       	brne	.+2      	; 0x9e0 <__fp_cmp+0x3e>
 9de:	a1 40       	sbci	r26, 0x01	; 1
 9e0:	a6 95       	lsr	r26
 9e2:	8f ef       	ldi	r24, 0xFF	; 255
 9e4:	81 1d       	adc	r24, r1
 9e6:	81 1d       	adc	r24, r1
 9e8:	08 95       	ret

000009ea <__fp_inf>:
 9ea:	97 f9       	bld	r25, 7
 9ec:	9f 67       	ori	r25, 0x7F	; 127
 9ee:	80 e8       	ldi	r24, 0x80	; 128
 9f0:	70 e0       	ldi	r23, 0x00	; 0
 9f2:	60 e0       	ldi	r22, 0x00	; 0
 9f4:	08 95       	ret

000009f6 <__fp_mintl>:
 9f6:	88 23       	and	r24, r24
 9f8:	71 f4       	brne	.+28     	; 0xa16 <__fp_mintl+0x20>
 9fa:	77 23       	and	r23, r23
 9fc:	21 f0       	breq	.+8      	; 0xa06 <__fp_mintl+0x10>
 9fe:	98 50       	subi	r25, 0x08	; 8
 a00:	87 2b       	or	r24, r23
 a02:	76 2f       	mov	r23, r22
 a04:	07 c0       	rjmp	.+14     	; 0xa14 <__fp_mintl+0x1e>
 a06:	66 23       	and	r22, r22
 a08:	11 f4       	brne	.+4      	; 0xa0e <__fp_mintl+0x18>
 a0a:	99 27       	eor	r25, r25
 a0c:	0d c0       	rjmp	.+26     	; 0xa28 <__fp_mintl+0x32>
 a0e:	90 51       	subi	r25, 0x10	; 16
 a10:	86 2b       	or	r24, r22
 a12:	70 e0       	ldi	r23, 0x00	; 0
 a14:	60 e0       	ldi	r22, 0x00	; 0
 a16:	2a f0       	brmi	.+10     	; 0xa22 <__fp_mintl+0x2c>
 a18:	9a 95       	dec	r25
 a1a:	66 0f       	add	r22, r22
 a1c:	77 1f       	adc	r23, r23
 a1e:	88 1f       	adc	r24, r24
 a20:	da f7       	brpl	.-10     	; 0xa18 <__fp_mintl+0x22>
 a22:	88 0f       	add	r24, r24
 a24:	96 95       	lsr	r25
 a26:	87 95       	ror	r24
 a28:	97 f9       	bld	r25, 7
 a2a:	08 95       	ret

00000a2c <__fp_mpack>:
 a2c:	9f 3f       	cpi	r25, 0xFF	; 255
 a2e:	31 f0       	breq	.+12     	; 0xa3c <__fp_mpack_finite+0xc>

00000a30 <__fp_mpack_finite>:
 a30:	91 50       	subi	r25, 0x01	; 1
 a32:	20 f4       	brcc	.+8      	; 0xa3c <__fp_mpack_finite+0xc>
 a34:	87 95       	ror	r24
 a36:	77 95       	ror	r23
 a38:	67 95       	ror	r22
 a3a:	b7 95       	ror	r27
 a3c:	88 0f       	add	r24, r24
 a3e:	91 1d       	adc	r25, r1
 a40:	96 95       	lsr	r25
 a42:	87 95       	ror	r24
 a44:	97 f9       	bld	r25, 7
 a46:	08 95       	ret

00000a48 <__fp_nan>:
 a48:	9f ef       	ldi	r25, 0xFF	; 255
 a4a:	80 ec       	ldi	r24, 0xC0	; 192
 a4c:	08 95       	ret

00000a4e <__fp_pscA>:
 a4e:	00 24       	eor	r0, r0
 a50:	0a 94       	dec	r0
 a52:	16 16       	cp	r1, r22
 a54:	17 06       	cpc	r1, r23
 a56:	18 06       	cpc	r1, r24
 a58:	09 06       	cpc	r0, r25
 a5a:	08 95       	ret

00000a5c <__fp_pscB>:
 a5c:	00 24       	eor	r0, r0
 a5e:	0a 94       	dec	r0
 a60:	12 16       	cp	r1, r18
 a62:	13 06       	cpc	r1, r19
 a64:	14 06       	cpc	r1, r20
 a66:	05 06       	cpc	r0, r21
 a68:	08 95       	ret

00000a6a <__fp_round>:
 a6a:	09 2e       	mov	r0, r25
 a6c:	03 94       	inc	r0
 a6e:	00 0c       	add	r0, r0
 a70:	11 f4       	brne	.+4      	; 0xa76 <__fp_round+0xc>
 a72:	88 23       	and	r24, r24
 a74:	52 f0       	brmi	.+20     	; 0xa8a <__fp_round+0x20>
 a76:	bb 0f       	add	r27, r27
 a78:	40 f4       	brcc	.+16     	; 0xa8a <__fp_round+0x20>
 a7a:	bf 2b       	or	r27, r31
 a7c:	11 f4       	brne	.+4      	; 0xa82 <__fp_round+0x18>
 a7e:	60 ff       	sbrs	r22, 0
 a80:	04 c0       	rjmp	.+8      	; 0xa8a <__fp_round+0x20>
 a82:	6f 5f       	subi	r22, 0xFF	; 255
 a84:	7f 4f       	sbci	r23, 0xFF	; 255
 a86:	8f 4f       	sbci	r24, 0xFF	; 255
 a88:	9f 4f       	sbci	r25, 0xFF	; 255
 a8a:	08 95       	ret

00000a8c <__fp_split3>:
 a8c:	57 fd       	sbrc	r21, 7
 a8e:	90 58       	subi	r25, 0x80	; 128
 a90:	44 0f       	add	r20, r20
 a92:	55 1f       	adc	r21, r21
 a94:	59 f0       	breq	.+22     	; 0xaac <__fp_splitA+0x10>
 a96:	5f 3f       	cpi	r21, 0xFF	; 255
 a98:	71 f0       	breq	.+28     	; 0xab6 <__fp_splitA+0x1a>
 a9a:	47 95       	ror	r20

00000a9c <__fp_splitA>:
 a9c:	88 0f       	add	r24, r24
 a9e:	97 fb       	bst	r25, 7
 aa0:	99 1f       	adc	r25, r25
 aa2:	61 f0       	breq	.+24     	; 0xabc <__fp_splitA+0x20>
 aa4:	9f 3f       	cpi	r25, 0xFF	; 255
 aa6:	79 f0       	breq	.+30     	; 0xac6 <__fp_splitA+0x2a>
 aa8:	87 95       	ror	r24
 aaa:	08 95       	ret
 aac:	12 16       	cp	r1, r18
 aae:	13 06       	cpc	r1, r19
 ab0:	14 06       	cpc	r1, r20
 ab2:	55 1f       	adc	r21, r21
 ab4:	f2 cf       	rjmp	.-28     	; 0xa9a <__fp_split3+0xe>
 ab6:	46 95       	lsr	r20
 ab8:	f1 df       	rcall	.-30     	; 0xa9c <__fp_splitA>
 aba:	08 c0       	rjmp	.+16     	; 0xacc <__fp_splitA+0x30>
 abc:	16 16       	cp	r1, r22
 abe:	17 06       	cpc	r1, r23
 ac0:	18 06       	cpc	r1, r24
 ac2:	99 1f       	adc	r25, r25
 ac4:	f1 cf       	rjmp	.-30     	; 0xaa8 <__fp_splitA+0xc>
 ac6:	86 95       	lsr	r24
 ac8:	71 05       	cpc	r23, r1
 aca:	61 05       	cpc	r22, r1
 acc:	08 94       	sec
 ace:	08 95       	ret

00000ad0 <__fp_trunc>:
 ad0:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_splitA>
 ad4:	a0 f0       	brcs	.+40     	; 0xafe <__fp_trunc+0x2e>
 ad6:	be e7       	ldi	r27, 0x7E	; 126
 ad8:	b9 17       	cp	r27, r25
 ada:	88 f4       	brcc	.+34     	; 0xafe <__fp_trunc+0x2e>
 adc:	bb 27       	eor	r27, r27
 ade:	9f 38       	cpi	r25, 0x8F	; 143
 ae0:	60 f4       	brcc	.+24     	; 0xafa <__fp_trunc+0x2a>
 ae2:	16 16       	cp	r1, r22
 ae4:	b1 1d       	adc	r27, r1
 ae6:	67 2f       	mov	r22, r23
 ae8:	78 2f       	mov	r23, r24
 aea:	88 27       	eor	r24, r24
 aec:	98 5f       	subi	r25, 0xF8	; 248
 aee:	f7 cf       	rjmp	.-18     	; 0xade <__fp_trunc+0xe>
 af0:	86 95       	lsr	r24
 af2:	77 95       	ror	r23
 af4:	67 95       	ror	r22
 af6:	b1 1d       	adc	r27, r1
 af8:	93 95       	inc	r25
 afa:	96 39       	cpi	r25, 0x96	; 150
 afc:	c8 f3       	brcs	.-14     	; 0xaf0 <__fp_trunc+0x20>
 afe:	08 95       	ret

00000b00 <__fp_zero>:
 b00:	e8 94       	clt

00000b02 <__fp_szero>:
 b02:	bb 27       	eor	r27, r27
 b04:	66 27       	eor	r22, r22
 b06:	77 27       	eor	r23, r23
 b08:	cb 01       	movw	r24, r22
 b0a:	97 f9       	bld	r25, 7
 b0c:	08 95       	ret

00000b0e <_exit>:
 b0e:	f8 94       	cli

00000b10 <__stop_program>:
 b10:	ff cf       	rjmp	.-2      	; 0xb10 <__stop_program>
