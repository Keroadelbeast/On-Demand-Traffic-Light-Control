
OnDemandTrafficLightControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000b7e  00000c12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  00000c14  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016da  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a5  00000000  00000000  0000248a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d18  00000000  00000000  00002e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00003b48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000502  00000000  00000000  00003d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c04  00000000  00000000  00004262  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004e66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 36       	cpi	r26, 0x63	; 99
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bc 01 	call	0x378	; 0x378 <main>
  8a:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:


void app_init(void){

	
	LED_INIT(LED_NORMAL,LED_GREEN);
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 a1 01 	call	0x342	; 0x342 <LED_INIT>
	LED_INIT(LED_NORMAL,LED_YELLOW);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	81 e4       	ldi	r24, 0x41	; 65
  9e:	0e 94 a1 01 	call	0x342	; 0x342 <LED_INIT>
	LED_INIT(LED_NORMAL,LED_RED);
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 a1 01 	call	0x342	; 0x342 <LED_INIT>
	//PEDESTERIAN MODE INIT
	LED_INIT(LED_PEDESTRIANS,LED_GREEN);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	82 e4       	ldi	r24, 0x42	; 66
  ae:	0e 94 a1 01 	call	0x342	; 0x342 <LED_INIT>
	LED_INIT(LED_PEDESTRIANS,LED_YELLOW);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	82 e4       	ldi	r24, 0x42	; 66
  b6:	0e 94 a1 01 	call	0x342	; 0x342 <LED_INIT>
	LED_INIT(LED_PEDESTRIANS,LED_RED);
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	82 e4       	ldi	r24, 0x42	; 66
  be:	0e 94 a1 01 	call	0x342	; 0x342 <LED_INIT>
	BUTTON_INIT(button_port,button_pin);
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	84 e4       	ldi	r24, 0x44	; 68
  c6:	0e 94 9a 01 	call	0x334	; 0x334 <BUTTON_INIT>
	TIMER_init();
  ca:	0e 94 16 03 	call	0x62c	; 0x62c <TIMER_init>
	sei();
  ce:	78 94       	sei
	RISING_EDGE();
  d0:	85 b7       	in	r24, 0x35	; 53
  d2:	83 60       	ori	r24, 0x03	; 3
  d4:	85 bf       	out	0x35, r24	; 53
	SETUP_INT0();
  d6:	8b b7       	in	r24, 0x3b	; 59
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	8b bf       	out	0x3b, r24	; 59
  dc:	08 95       	ret

000000de <app_start>:
	
}

void app_start(void)
{
  de:	cf 93       	push	r28
	//////////////////////normal mode////////////////////
	if (normal_mode==1)
  e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	09 f0       	breq	.+2      	; 0xea <app_start+0xc>
  e8:	75 c0       	rjmp	.+234    	; 0x1d4 <app_start+0xf6>
	{
		TIMER_init();
  ea:	0e 94 16 03 	call	0x62c	; 0x62c <TIMER_init>
		LED_ON(LED_NORMAL, LED_GREEN);
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	81 e4       	ldi	r24, 0x41	; 65
  f2:	0e 94 a8 01 	call	0x350	; 0x350 <LED_ON>
		LED_ON(LED_PEDESTRIANS,LED_RED);
  f6:	62 e0       	ldi	r22, 0x02	; 2
  f8:	82 e4       	ldi	r24, 0x42	; 66
  fa:	0e 94 a8 01 	call	0x350	; 0x350 <LED_ON>
		TIMER_delay(5000);
  fe:	88 e8       	ldi	r24, 0x88	; 136
 100:	93 e1       	ldi	r25, 0x13	; 19
 102:	0e 94 18 03 	call	0x630	; 0x630 <TIMER_delay>
		LED_OFF(LED_NORMAL,LED_GREEN);
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	81 e4       	ldi	r24, 0x41	; 65
 10a:	0e 94 af 01 	call	0x35e	; 0x35e <LED_OFF>
		led_no = 0;
 10e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
		if (!normal_mode)
 112:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 116:	88 23       	and	r24, r24
 118:	09 f4       	brne	.+2      	; 0x11c <app_start+0x3e>
 11a:	fe c0       	rjmp	.+508    	; 0x318 <app_start+0x23a>
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	11 c0       	rjmp	.+34     	; 0x142 <app_start+0x64>
		return;
		for (Uint8 i=0;i<10;i++)
		{
			LED_TOGGLE(LED_NORMAL, LED_YELLOW);
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	81 e4       	ldi	r24, 0x41	; 65
 124:	0e 94 b6 01 	call	0x36c	; 0x36c <LED_TOGGLE>
			TIMER_delay(500);
 128:	84 ef       	ldi	r24, 0xF4	; 244
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 18 03 	call	0x630	; 0x630 <TIMER_delay>
			led_no = 1;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			if (!normal_mode)
 136:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 13a:	88 23       	and	r24, r24
 13c:	09 f4       	brne	.+2      	; 0x140 <app_start+0x62>
 13e:	ec c0       	rjmp	.+472    	; 0x318 <app_start+0x23a>
		TIMER_delay(5000);
		LED_OFF(LED_NORMAL,LED_GREEN);
		led_no = 0;
		if (!normal_mode)
		return;
		for (Uint8 i=0;i<10;i++)
 140:	cf 5f       	subi	r28, 0xFF	; 255
 142:	ca 30       	cpi	r28, 0x0A	; 10
 144:	68 f3       	brcs	.-38     	; 0x120 <app_start+0x42>
			TIMER_delay(500);
			led_no = 1;
			if (!normal_mode)
			return;
		}
		LED_OFF(LED_NORMAL, LED_YELLOW);
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	81 e4       	ldi	r24, 0x41	; 65
 14a:	0e 94 af 01 	call	0x35e	; 0x35e <LED_OFF>
		
		if (!normal_mode)
 14e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 152:	88 23       	and	r24, r24
 154:	09 f4       	brne	.+2      	; 0x158 <app_start+0x7a>
 156:	e0 c0       	rjmp	.+448    	; 0x318 <app_start+0x23a>
		return;
		LED_OFF(LED_PEDESTRIANS,LED_RED);
 158:	62 e0       	ldi	r22, 0x02	; 2
 15a:	82 e4       	ldi	r24, 0x42	; 66
 15c:	0e 94 af 01 	call	0x35e	; 0x35e <LED_OFF>
		LED_ON(LED_PEDESTRIANS,LED_GREEN);
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	82 e4       	ldi	r24, 0x42	; 66
 164:	0e 94 a8 01 	call	0x350	; 0x350 <LED_ON>
		LED_ON(LED_NORMAL,LED_RED);
 168:	62 e0       	ldi	r22, 0x02	; 2
 16a:	81 e4       	ldi	r24, 0x41	; 65
 16c:	0e 94 a8 01 	call	0x350	; 0x350 <LED_ON>
		TIMER_delay(5000);
 170:	88 e8       	ldi	r24, 0x88	; 136
 172:	93 e1       	ldi	r25, 0x13	; 19
 174:	0e 94 18 03 	call	0x630	; 0x630 <TIMER_delay>
		LED_OFF(LED_PEDESTRIANS,LED_GREEN);
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	82 e4       	ldi	r24, 0x42	; 66
 17c:	0e 94 af 01 	call	0x35e	; 0x35e <LED_OFF>
		LED_OFF(LED_NORMAL,LED_RED);
 180:	62 e0       	ldi	r22, 0x02	; 2
 182:	81 e4       	ldi	r24, 0x41	; 65
 184:	0e 94 af 01 	call	0x35e	; 0x35e <LED_OFF>
		led_no = 2;
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		if (!normal_mode)
 18e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 192:	88 23       	and	r24, r24
 194:	09 f4       	brne	.+2      	; 0x198 <app_start+0xba>
 196:	c0 c0       	rjmp	.+384    	; 0x318 <app_start+0x23a>
 198:	c0 e0       	ldi	r28, 0x00	; 0
 19a:	11 c0       	rjmp	.+34     	; 0x1be <app_start+0xe0>
		return;
		for (Uint8 i=0;i<10;i++)
		{
			LED_TOGGLE(LED_NORMAL, LED_YELLOW);
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	81 e4       	ldi	r24, 0x41	; 65
 1a0:	0e 94 b6 01 	call	0x36c	; 0x36c <LED_TOGGLE>
			TIMER_delay(500);
 1a4:	84 ef       	ldi	r24, 0xF4	; 244
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	0e 94 18 03 	call	0x630	; 0x630 <TIMER_delay>
			led_no = 1;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			if (!normal_mode)
 1b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b6:	88 23       	and	r24, r24
 1b8:	09 f4       	brne	.+2      	; 0x1bc <app_start+0xde>
 1ba:	ae c0       	rjmp	.+348    	; 0x318 <app_start+0x23a>
		LED_OFF(LED_PEDESTRIANS,LED_GREEN);
		LED_OFF(LED_NORMAL,LED_RED);
		led_no = 2;
		if (!normal_mode)
		return;
		for (Uint8 i=0;i<10;i++)
 1bc:	cf 5f       	subi	r28, 0xFF	; 255
 1be:	ca 30       	cpi	r28, 0x0A	; 10
 1c0:	68 f3       	brcs	.-38     	; 0x19c <app_start+0xbe>
			led_no = 1;
			if (!normal_mode)
			return;
		}
		
		LED_OFF(LED_NORMAL, LED_YELLOW);
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	81 e4       	ldi	r24, 0x41	; 65
 1c6:	0e 94 af 01 	call	0x35e	; 0x35e <LED_OFF>
		LED_OFF(LED_NORMAL, LED_RED);
 1ca:	62 e0       	ldi	r22, 0x02	; 2
 1cc:	81 e4       	ldi	r24, 0x41	; 65
 1ce:	0e 94 af 01 	call	0x35e	; 0x35e <LED_OFF>
 1d2:	a2 c0       	rjmp	.+324    	; 0x318 <app_start+0x23a>
		if (!normal_mode)
		return;
		/////////////////////////////////////////////////////////////////
	}
	else {
		if (led_no == 2) //car led was red
 1d4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	99 f5       	brne	.+102    	; 0x242 <app_start+0x164>
		{
			TIMER_init();
 1dc:	0e 94 16 03 	call	0x62c	; 0x62c <TIMER_init>
// 			TIMER_delay(5000);
// 			LED_OFF(LED_NORMAL, LED_RED);

// 			LED_OFF(LED_PEDESTRIANS,LED_GREEN);

			for (Uint8 i=0;i<10;i++)
 1e0:	c0 e0       	ldi	r28, 0x00	; 0
 1e2:	0d c0       	rjmp	.+26     	; 0x1fe <app_start+0x120>
			{
				LED_TOGGLE(LED_PEDESTRIANS,LED_YELLOW);
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	82 e4       	ldi	r24, 0x42	; 66
 1e8:	0e 94 b6 01 	call	0x36c	; 0x36c <LED_TOGGLE>
				LED_TOGGLE(LED_NORMAL,LED_YELLOW);
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	81 e4       	ldi	r24, 0x41	; 65
 1f0:	0e 94 b6 01 	call	0x36c	; 0x36c <LED_TOGGLE>
				TIMER_delay(500);
 1f4:	84 ef       	ldi	r24, 0xF4	; 244
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 18 03 	call	0x630	; 0x630 <TIMER_delay>
// 			TIMER_delay(5000);
// 			LED_OFF(LED_NORMAL, LED_RED);

// 			LED_OFF(LED_PEDESTRIANS,LED_GREEN);

			for (Uint8 i=0;i<10;i++)
 1fc:	cf 5f       	subi	r28, 0xFF	; 255
 1fe:	ca 30       	cpi	r28, 0x0A	; 10
 200:	88 f3       	brcs	.-30     	; 0x1e4 <app_start+0x106>
			{
				LED_TOGGLE(LED_PEDESTRIANS,LED_YELLOW);
				LED_TOGGLE(LED_NORMAL,LED_YELLOW);
				TIMER_delay(500);
			}
			LED_OFF(LED_PEDESTRIANS,LED_YELLOW);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	82 e4       	ldi	r24, 0x42	; 66
 206:	0e 94 af 01 	call	0x35e	; 0x35e <LED_OFF>
			LED_OFF(LED_NORMAL,LED_YELLOW);
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	81 e4       	ldi	r24, 0x41	; 65
 20e:	0e 94 af 01 	call	0x35e	; 0x35e <LED_OFF>
			LED_ON(LED_NORMAL,LED_GREEN);
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	81 e4       	ldi	r24, 0x41	; 65
 216:	0e 94 a8 01 	call	0x350	; 0x350 <LED_ON>
			LED_ON(LED_PEDESTRIANS,LED_RED);
 21a:	62 e0       	ldi	r22, 0x02	; 2
 21c:	82 e4       	ldi	r24, 0x42	; 66
 21e:	0e 94 a8 01 	call	0x350	; 0x350 <LED_ON>
			TIMER_delay(5000);
 222:	88 e8       	ldi	r24, 0x88	; 136
 224:	93 e1       	ldi	r25, 0x13	; 19
 226:	0e 94 18 03 	call	0x630	; 0x630 <TIMER_delay>
			LED_OFF(LED_NORMAL,LED_GREEN);
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	81 e4       	ldi	r24, 0x41	; 65
 22e:	0e 94 af 01 	call	0x35e	; 0x35e <LED_OFF>
			LED_OFF(LED_PEDESTRIANS,LED_RED);
 232:	62 e0       	ldi	r22, 0x02	; 2
 234:	82 e4       	ldi	r24, 0x42	; 66
 236:	0e 94 af 01 	call	0x35e	; 0x35e <LED_OFF>
			normal_mode=1;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 240:	6b c0       	rjmp	.+214    	; 0x318 <app_start+0x23a>
			
		}else //led yellow or green
		{
			TIMER_init();
 242:	0e 94 16 03 	call	0x62c	; 0x62c <TIMER_init>
			LED_ON(LED_PEDESTRIANS,LED_RED);
 246:	62 e0       	ldi	r22, 0x02	; 2
 248:	82 e4       	ldi	r24, 0x42	; 66
 24a:	0e 94 a8 01 	call	0x350	; 0x350 <LED_ON>
			for(Uint8 i=0;i<10;i++)
 24e:	c0 e0       	ldi	r28, 0x00	; 0
 250:	0d c0       	rjmp	.+26     	; 0x26c <app_start+0x18e>
			{
				LED_TOGGLE(LED_PEDESTRIANS,LED_YELLOW);
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	82 e4       	ldi	r24, 0x42	; 66
 256:	0e 94 b6 01 	call	0x36c	; 0x36c <LED_TOGGLE>
				LED_TOGGLE(LED_NORMAL,LED_YELLOW);
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	81 e4       	ldi	r24, 0x41	; 65
 25e:	0e 94 b6 01 	call	0x36c	; 0x36c <LED_TOGGLE>
				TIMER_delay(500);
 262:	84 ef       	ldi	r24, 0xF4	; 244
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	0e 94 18 03 	call	0x630	; 0x630 <TIMER_delay>
			
		}else //led yellow or green
		{
			TIMER_init();
			LED_ON(LED_PEDESTRIANS,LED_RED);
			for(Uint8 i=0;i<10;i++)
 26a:	cf 5f       	subi	r28, 0xFF	; 255
 26c:	ca 30       	cpi	r28, 0x0A	; 10
 26e:	88 f3       	brcs	.-30     	; 0x252 <app_start+0x174>
			{
				LED_TOGGLE(LED_PEDESTRIANS,LED_YELLOW);
				LED_TOGGLE(LED_NORMAL,LED_YELLOW);
				TIMER_delay(500);
			}
			LED_OFF(LED_PEDESTRIANS,LED_RED);
 270:	62 e0       	ldi	r22, 0x02	; 2
 272:	82 e4       	ldi	r24, 0x42	; 66
 274:	0e 94 af 01 	call	0x35e	; 0x35e <LED_OFF>
			LED_OFF(LED_PEDESTRIANS,LED_YELLOW);
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	82 e4       	ldi	r24, 0x42	; 66
 27c:	0e 94 af 01 	call	0x35e	; 0x35e <LED_OFF>
			LED_OFF(LED_NORMAL,LED_YELLOW);
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	81 e4       	ldi	r24, 0x41	; 65
 284:	0e 94 af 01 	call	0x35e	; 0x35e <LED_OFF>
			LED_OFF(LED_NORMAL,LED_GREEN);
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	81 e4       	ldi	r24, 0x41	; 65
 28c:	0e 94 af 01 	call	0x35e	; 0x35e <LED_OFF>
			//normal redled and ped greenled on for 5sec
			LED_ON(LED_PEDESTRIANS,LED_GREEN);
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	82 e4       	ldi	r24, 0x42	; 66
 294:	0e 94 a8 01 	call	0x350	; 0x350 <LED_ON>
			LED_ON(LED_NORMAL,LED_RED);
 298:	62 e0       	ldi	r22, 0x02	; 2
 29a:	81 e4       	ldi	r24, 0x41	; 65
 29c:	0e 94 a8 01 	call	0x350	; 0x350 <LED_ON>
			TIMER_delay(5000);
 2a0:	88 e8       	ldi	r24, 0x88	; 136
 2a2:	93 e1       	ldi	r25, 0x13	; 19
 2a4:	0e 94 18 03 	call	0x630	; 0x630 <TIMER_delay>
			LED_OFF(LED_PEDESTRIANS,LED_GREEN);
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	82 e4       	ldi	r24, 0x42	; 66
 2ac:	0e 94 af 01 	call	0x35e	; 0x35e <LED_OFF>
			LED_OFF(LED_NORMAL,LED_RED);
 2b0:	62 e0       	ldi	r22, 0x02	; 2
 2b2:	81 e4       	ldi	r24, 0x41	; 65
 2b4:	0e 94 af 01 	call	0x35e	; 0x35e <LED_OFF>
			for (Uint8 i=0;i<10;i++)
 2b8:	c0 e0       	ldi	r28, 0x00	; 0
 2ba:	0d c0       	rjmp	.+26     	; 0x2d6 <app_start+0x1f8>
			{
				LED_TOGGLE(LED_PEDESTRIANS,LED_YELLOW);
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	82 e4       	ldi	r24, 0x42	; 66
 2c0:	0e 94 b6 01 	call	0x36c	; 0x36c <LED_TOGGLE>
				LED_TOGGLE(LED_NORMAL,LED_YELLOW);
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	81 e4       	ldi	r24, 0x41	; 65
 2c8:	0e 94 b6 01 	call	0x36c	; 0x36c <LED_TOGGLE>
				TIMER_delay(500);
 2cc:	84 ef       	ldi	r24, 0xF4	; 244
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	0e 94 18 03 	call	0x630	; 0x630 <TIMER_delay>
			LED_ON(LED_PEDESTRIANS,LED_GREEN);
			LED_ON(LED_NORMAL,LED_RED);
			TIMER_delay(5000);
			LED_OFF(LED_PEDESTRIANS,LED_GREEN);
			LED_OFF(LED_NORMAL,LED_RED);
			for (Uint8 i=0;i<10;i++)
 2d4:	cf 5f       	subi	r28, 0xFF	; 255
 2d6:	ca 30       	cpi	r28, 0x0A	; 10
 2d8:	88 f3       	brcs	.-30     	; 0x2bc <app_start+0x1de>
			{
				LED_TOGGLE(LED_PEDESTRIANS,LED_YELLOW);
				LED_TOGGLE(LED_NORMAL,LED_YELLOW);
				TIMER_delay(500);
			}
			LED_OFF(LED_PEDESTRIANS,LED_YELLOW);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	82 e4       	ldi	r24, 0x42	; 66
 2de:	0e 94 af 01 	call	0x35e	; 0x35e <LED_OFF>
			LED_OFF(LED_NORMAL,LED_YELLOW);
 2e2:	61 e0       	ldi	r22, 0x01	; 1
 2e4:	81 e4       	ldi	r24, 0x41	; 65
 2e6:	0e 94 af 01 	call	0x35e	; 0x35e <LED_OFF>
			//ped redled and normal greenled on for 5sec
			LED_ON(LED_PEDESTRIANS,LED_RED);
 2ea:	62 e0       	ldi	r22, 0x02	; 2
 2ec:	82 e4       	ldi	r24, 0x42	; 66
 2ee:	0e 94 a8 01 	call	0x350	; 0x350 <LED_ON>
			LED_ON(LED_NORMAL,LED_GREEN);
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	81 e4       	ldi	r24, 0x41	; 65
 2f6:	0e 94 a8 01 	call	0x350	; 0x350 <LED_ON>
			TIMER_delay(5000);
 2fa:	88 e8       	ldi	r24, 0x88	; 136
 2fc:	93 e1       	ldi	r25, 0x13	; 19
 2fe:	0e 94 18 03 	call	0x630	; 0x630 <TIMER_delay>
			LED_OFF(LED_PEDESTRIANS,LED_RED);
 302:	62 e0       	ldi	r22, 0x02	; 2
 304:	82 e4       	ldi	r24, 0x42	; 66
 306:	0e 94 af 01 	call	0x35e	; 0x35e <LED_OFF>
			LED_OFF(LED_NORMAL,LED_GREEN);
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	81 e4       	ldi	r24, 0x41	; 65
 30e:	0e 94 af 01 	call	0x35e	; 0x35e <LED_OFF>
			normal_mode=1;
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			
		}
	}
	
}
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <__vector_1>:

ISR(INT0_vect)
{
 31c:	1f 92       	push	r1
 31e:	0f 92       	push	r0
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	0f 92       	push	r0
 324:	11 24       	eor	r1, r1
	normal_mode=0;
 326:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	//mode=HIGH;
	//buttonst=HIGH;
	
}
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <BUTTON_INIT>:
     #include "button.h"
     #include "avr/delay.h"
     #define NO_OF_PRESSES 2
     Uint8 buttonState ;

     void BUTTON_INIT(Uint8 BUTTONPORT,Uint8 BUTTONPIN){ //button is an input device
 334:	98 2f       	mov	r25, r24
 336:	86 2f       	mov	r24, r22
	     DIO_INIT(BUTTONPIN,BUTTONPORT,IN);
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	69 2f       	mov	r22, r25
 33c:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_INIT>
 340:	08 95       	ret

00000342 <LED_INIT>:
 * Created: 11/7/2022 10:53:52 AM
 *  Author: carlo
 */ 
#include "LED.h"

void LED_INIT(Uint8 LEDPORT,Uint8 LEDPIN){//output device
 342:	98 2f       	mov	r25, r24
 344:	86 2f       	mov	r24, r22
	DIO_INIT(LEDPIN,LEDPORT,OUT);	
 346:	41 e0       	ldi	r20, 0x01	; 1
 348:	69 2f       	mov	r22, r25
 34a:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_INIT>
 34e:	08 95       	ret

00000350 <LED_ON>:
}
void LED_ON(Uint8 LEDPORT,Uint8 LEDPIN){
 350:	98 2f       	mov	r25, r24
 352:	86 2f       	mov	r24, r22
	DIO_WRITE(LEDPIN,LEDPORT,HIGH);
 354:	41 e0       	ldi	r20, 0x01	; 1
 356:	69 2f       	mov	r22, r25
 358:	0e 94 4c 02 	call	0x498	; 0x498 <DIO_WRITE>
 35c:	08 95       	ret

0000035e <LED_OFF>:
}
void LED_OFF(Uint8 LEDPORT,Uint8 LEDPIN){
 35e:	98 2f       	mov	r25, r24
 360:	86 2f       	mov	r24, r22
	DIO_WRITE(LEDPIN,LEDPORT,LOW);
 362:	40 e0       	ldi	r20, 0x00	; 0
 364:	69 2f       	mov	r22, r25
 366:	0e 94 4c 02 	call	0x498	; 0x498 <DIO_WRITE>
 36a:	08 95       	ret

0000036c <LED_TOGGLE>:
}
void LED_TOGGLE(Uint8 LEDPORT,Uint8 LEDPIN){
 36c:	98 2f       	mov	r25, r24
 36e:	86 2f       	mov	r24, r22
	DIO_TOGGLE(LEDPIN,LEDPORT);
 370:	69 2f       	mov	r22, r25
 372:	0e 94 d7 02 	call	0x5ae	; 0x5ae <DIO_TOGGLE>
 376:	08 95       	ret

00000378 <main>:
#include <util/delay.h>//to use delay in function
#include "ECUAL/BUTTON DRIVER/button.h"
#include "APPLICATION/APP.h"
int main(void)
{
	app_init();
 378:	0e 94 49 00 	call	0x92	; 0x92 <app_init>

	while (1)
	{
		
		app_start();
 37c:	0e 94 6f 00 	call	0xde	; 0xde <app_start>
 380:	fd cf       	rjmp	.-6      	; 0x37c <main+0x4>

00000382 <DIO_INIT>:
#include "../../Utilities/STD.h"
#include "../Timer Driver/Timer.h"
#include "DIO.h"
void DIO_INIT(Uint8 PINNO,Uint8 PORTNO ,Uint8 DIR)
{
	switch(PORTNO){
 382:	62 34       	cpi	r22, 0x42	; 66
 384:	59 f1       	breq	.+86     	; 0x3dc <DIO_INIT+0x5a>
 386:	18 f4       	brcc	.+6      	; 0x38e <DIO_INIT+0xc>
 388:	61 34       	cpi	r22, 0x41	; 65
 38a:	41 f0       	breq	.+16     	; 0x39c <DIO_INIT+0x1a>
 38c:	08 95       	ret
 38e:	63 34       	cpi	r22, 0x43	; 67
 390:	09 f4       	brne	.+2      	; 0x394 <DIO_INIT+0x12>
 392:	44 c0       	rjmp	.+136    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 394:	64 34       	cpi	r22, 0x44	; 68
 396:	09 f4       	brne	.+2      	; 0x39a <DIO_INIT+0x18>
 398:	60 c0       	rjmp	.+192    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 39a:	08 95       	ret
		case PORT_A:
		if(DIR==IN){
 39c:	41 11       	cpse	r20, r1
 39e:	0e c0       	rjmp	.+28     	; 0x3bc <DIO_INIT+0x3a>
			DDRA &= ~(1<<PINNO);//INPUT
 3a0:	4a b3       	in	r20, 0x1a	; 26
 3a2:	21 e0       	ldi	r18, 0x01	; 1
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	b9 01       	movw	r22, r18
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_INIT+0x2c>
 3aa:	66 0f       	add	r22, r22
 3ac:	77 1f       	adc	r23, r23
 3ae:	8a 95       	dec	r24
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_INIT+0x28>
 3b2:	cb 01       	movw	r24, r22
 3b4:	80 95       	com	r24
 3b6:	84 23       	and	r24, r20
 3b8:	8a bb       	out	0x1a, r24	; 26
 3ba:	08 95       	ret
			}else if(DIR==OUT){
 3bc:	41 30       	cpi	r20, 0x01	; 1
 3be:	09 f0       	breq	.+2      	; 0x3c2 <DIO_INIT+0x40>
 3c0:	6a c0       	rjmp	.+212    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
			DDRA |= (1<<PINNO);//OUTPUT
 3c2:	4a b3       	in	r20, 0x1a	; 26
 3c4:	21 e0       	ldi	r18, 0x01	; 1
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	b9 01       	movw	r22, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_INIT+0x4e>
 3cc:	66 0f       	add	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	8a 95       	dec	r24
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_INIT+0x4a>
 3d4:	cb 01       	movw	r24, r22
 3d6:	84 2b       	or	r24, r20
 3d8:	8a bb       	out	0x1a, r24	; 26
 3da:	08 95       	ret
			}else{
			//error handling
		}
		break;
		case PORT_B:
		if(DIR==IN){
 3dc:	41 11       	cpse	r20, r1
 3de:	0e c0       	rjmp	.+28     	; 0x3fc <DIO_INIT+0x7a>
			DDRB &= ~(1<<PINNO);
 3e0:	47 b3       	in	r20, 0x17	; 23
 3e2:	21 e0       	ldi	r18, 0x01	; 1
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	b9 01       	movw	r22, r18
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_INIT+0x6c>
 3ea:	66 0f       	add	r22, r22
 3ec:	77 1f       	adc	r23, r23
 3ee:	8a 95       	dec	r24
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_INIT+0x68>
 3f2:	cb 01       	movw	r24, r22
 3f4:	80 95       	com	r24
 3f6:	84 23       	and	r24, r20
 3f8:	87 bb       	out	0x17, r24	; 23
 3fa:	08 95       	ret
			}else if(DIR==OUT){
 3fc:	41 30       	cpi	r20, 0x01	; 1
 3fe:	09 f0       	breq	.+2      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 400:	4a c0       	rjmp	.+148    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
			DDRB |= (1<<PINNO);
 402:	47 b3       	in	r20, 0x17	; 23
 404:	21 e0       	ldi	r18, 0x01	; 1
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	b9 01       	movw	r22, r18
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40c:	66 0f       	add	r22, r22
 40e:	77 1f       	adc	r23, r23
 410:	8a 95       	dec	r24
 412:	e2 f7       	brpl	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 414:	cb 01       	movw	r24, r22
 416:	84 2b       	or	r24, r20
 418:	87 bb       	out	0x17, r24	; 23
 41a:	08 95       	ret
			//error handling
		}
		
		break;
		case PORT_C:
		if(DIR==IN){
 41c:	41 11       	cpse	r20, r1
 41e:	0e c0       	rjmp	.+28     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
			DDRC &= ~(1<<PINNO);
 420:	44 b3       	in	r20, 0x14	; 20
 422:	21 e0       	ldi	r18, 0x01	; 1
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	b9 01       	movw	r22, r18
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	66 0f       	add	r22, r22
 42c:	77 1f       	adc	r23, r23
 42e:	8a 95       	dec	r24
 430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	cb 01       	movw	r24, r22
 434:	80 95       	com	r24
 436:	84 23       	and	r24, r20
 438:	84 bb       	out	0x14, r24	; 20
 43a:	08 95       	ret
			}else if(DIR==OUT){
 43c:	41 30       	cpi	r20, 0x01	; 1
 43e:	59 f5       	brne	.+86     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
			DDRC |= (1<<PINNO);
 440:	44 b3       	in	r20, 0x14	; 20
 442:	21 e0       	ldi	r18, 0x01	; 1
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	b9 01       	movw	r22, r18
 448:	02 c0       	rjmp	.+4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44a:	66 0f       	add	r22, r22
 44c:	77 1f       	adc	r23, r23
 44e:	8a 95       	dec	r24
 450:	e2 f7       	brpl	.-8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 452:	cb 01       	movw	r24, r22
 454:	84 2b       	or	r24, r20
 456:	84 bb       	out	0x14, r24	; 20
 458:	08 95       	ret
			}else{
			//error handling
		}
		break;
		case PORT_D:
		if(DIR==IN){
 45a:	41 11       	cpse	r20, r1
 45c:	0e c0       	rjmp	.+28     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
			DDRD &= ~(1<<PINNO);
 45e:	41 b3       	in	r20, 0x11	; 17
 460:	21 e0       	ldi	r18, 0x01	; 1
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	b9 01       	movw	r22, r18
 466:	02 c0       	rjmp	.+4      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 468:	66 0f       	add	r22, r22
 46a:	77 1f       	adc	r23, r23
 46c:	8a 95       	dec	r24
 46e:	e2 f7       	brpl	.-8      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 470:	cb 01       	movw	r24, r22
 472:	80 95       	com	r24
 474:	84 23       	and	r24, r20
 476:	81 bb       	out	0x11, r24	; 17
 478:	08 95       	ret
			}else if(DIR==OUT){
 47a:	41 30       	cpi	r20, 0x01	; 1
 47c:	61 f4       	brne	.+24     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
			DDRD |= (1<<PINNO);
 47e:	41 b3       	in	r20, 0x11	; 17
 480:	21 e0       	ldi	r18, 0x01	; 1
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	b9 01       	movw	r22, r18
 486:	02 c0       	rjmp	.+4      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 488:	66 0f       	add	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	8a 95       	dec	r24
 48e:	e2 f7       	brpl	.-8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 490:	cb 01       	movw	r24, r22
 492:	84 2b       	or	r24, r20
 494:	81 bb       	out	0x11, r24	; 17
 496:	08 95       	ret

00000498 <DIO_WRITE>:
	}
	
}
void DIO_WRITE(Uint8 PINNO,Uint8 PORTNO ,Uint8 VAL){
	
	switch(PORTNO){
 498:	62 34       	cpi	r22, 0x42	; 66
 49a:	59 f1       	breq	.+86     	; 0x4f2 <DIO_WRITE+0x5a>
 49c:	18 f4       	brcc	.+6      	; 0x4a4 <DIO_WRITE+0xc>
 49e:	61 34       	cpi	r22, 0x41	; 65
 4a0:	41 f0       	breq	.+16     	; 0x4b2 <DIO_WRITE+0x1a>
 4a2:	08 95       	ret
 4a4:	63 34       	cpi	r22, 0x43	; 67
 4a6:	09 f4       	brne	.+2      	; 0x4aa <DIO_WRITE+0x12>
 4a8:	44 c0       	rjmp	.+136    	; 0x532 <DIO_WRITE+0x9a>
 4aa:	64 34       	cpi	r22, 0x44	; 68
 4ac:	09 f4       	brne	.+2      	; 0x4b0 <DIO_WRITE+0x18>
 4ae:	60 c0       	rjmp	.+192    	; 0x570 <DIO_WRITE+0xd8>
 4b0:	08 95       	ret
		case PORT_A:
		if(VAL==LOW){
 4b2:	41 11       	cpse	r20, r1
 4b4:	0e c0       	rjmp	.+28     	; 0x4d2 <DIO_WRITE+0x3a>
			PORTA &= ~(1<<PINNO);//WRITE 0
 4b6:	4b b3       	in	r20, 0x1b	; 27
 4b8:	21 e0       	ldi	r18, 0x01	; 1
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	b9 01       	movw	r22, r18
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_WRITE+0x2c>
 4c0:	66 0f       	add	r22, r22
 4c2:	77 1f       	adc	r23, r23
 4c4:	8a 95       	dec	r24
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_WRITE+0x28>
 4c8:	cb 01       	movw	r24, r22
 4ca:	80 95       	com	r24
 4cc:	84 23       	and	r24, r20
 4ce:	8b bb       	out	0x1b, r24	; 27
 4d0:	08 95       	ret
			}else if(VAL==HIGH){
 4d2:	41 30       	cpi	r20, 0x01	; 1
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <DIO_WRITE+0x40>
 4d6:	6a c0       	rjmp	.+212    	; 0x5ac <DIO_WRITE+0x114>
			PORTA|= (1<<PINNO);//WRITE 1
 4d8:	4b b3       	in	r20, 0x1b	; 27
 4da:	21 e0       	ldi	r18, 0x01	; 1
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	b9 01       	movw	r22, r18
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_WRITE+0x4e>
 4e2:	66 0f       	add	r22, r22
 4e4:	77 1f       	adc	r23, r23
 4e6:	8a 95       	dec	r24
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_WRITE+0x4a>
 4ea:	cb 01       	movw	r24, r22
 4ec:	84 2b       	or	r24, r20
 4ee:	8b bb       	out	0x1b, r24	; 27
 4f0:	08 95       	ret
			}else{
			//error handling
		}
		break;
		case PORT_B:
		if(VAL==LOW){
 4f2:	41 11       	cpse	r20, r1
 4f4:	0e c0       	rjmp	.+28     	; 0x512 <DIO_WRITE+0x7a>
			PORTB &= ~(1<<PINNO);
 4f6:	48 b3       	in	r20, 0x18	; 24
 4f8:	21 e0       	ldi	r18, 0x01	; 1
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	b9 01       	movw	r22, r18
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_WRITE+0x6c>
 500:	66 0f       	add	r22, r22
 502:	77 1f       	adc	r23, r23
 504:	8a 95       	dec	r24
 506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_WRITE+0x68>
 508:	cb 01       	movw	r24, r22
 50a:	80 95       	com	r24
 50c:	84 23       	and	r24, r20
 50e:	88 bb       	out	0x18, r24	; 24
 510:	08 95       	ret
			}else if(VAL==HIGH){
 512:	41 30       	cpi	r20, 0x01	; 1
 514:	09 f0       	breq	.+2      	; 0x518 <DIO_WRITE+0x80>
 516:	4a c0       	rjmp	.+148    	; 0x5ac <DIO_WRITE+0x114>
			PORTB |= (1<<PINNO);
 518:	48 b3       	in	r20, 0x18	; 24
 51a:	21 e0       	ldi	r18, 0x01	; 1
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	b9 01       	movw	r22, r18
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_WRITE+0x8e>
 522:	66 0f       	add	r22, r22
 524:	77 1f       	adc	r23, r23
 526:	8a 95       	dec	r24
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_WRITE+0x8a>
 52a:	cb 01       	movw	r24, r22
 52c:	84 2b       	or	r24, r20
 52e:	88 bb       	out	0x18, r24	; 24
 530:	08 95       	ret
			//error handling
		}
		
		break;
		case PORT_C:
		if(VAL==LOW){
 532:	41 11       	cpse	r20, r1
 534:	0e c0       	rjmp	.+28     	; 0x552 <DIO_WRITE+0xba>
			PORTC &= ~(1<<PINNO);
 536:	45 b3       	in	r20, 0x15	; 21
 538:	21 e0       	ldi	r18, 0x01	; 1
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	b9 01       	movw	r22, r18
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_WRITE+0xac>
 540:	66 0f       	add	r22, r22
 542:	77 1f       	adc	r23, r23
 544:	8a 95       	dec	r24
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_WRITE+0xa8>
 548:	cb 01       	movw	r24, r22
 54a:	80 95       	com	r24
 54c:	84 23       	and	r24, r20
 54e:	85 bb       	out	0x15, r24	; 21
 550:	08 95       	ret
			}else if(VAL==HIGH){
 552:	41 30       	cpi	r20, 0x01	; 1
 554:	59 f5       	brne	.+86     	; 0x5ac <DIO_WRITE+0x114>
			PORTC |= (1<<PINNO);
 556:	45 b3       	in	r20, 0x15	; 21
 558:	21 e0       	ldi	r18, 0x01	; 1
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	b9 01       	movw	r22, r18
 55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_WRITE+0xcc>
 560:	66 0f       	add	r22, r22
 562:	77 1f       	adc	r23, r23
 564:	8a 95       	dec	r24
 566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_WRITE+0xc8>
 568:	cb 01       	movw	r24, r22
 56a:	84 2b       	or	r24, r20
 56c:	85 bb       	out	0x15, r24	; 21
 56e:	08 95       	ret
			}else{
			//error handling
		}
		break;
		case PORT_D:
		if(VAL==LOW){
 570:	41 11       	cpse	r20, r1
 572:	0e c0       	rjmp	.+28     	; 0x590 <DIO_WRITE+0xf8>
			PORTD &= ~(1<<PINNO);
 574:	42 b3       	in	r20, 0x12	; 18
 576:	21 e0       	ldi	r18, 0x01	; 1
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	b9 01       	movw	r22, r18
 57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_WRITE+0xea>
 57e:	66 0f       	add	r22, r22
 580:	77 1f       	adc	r23, r23
 582:	8a 95       	dec	r24
 584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_WRITE+0xe6>
 586:	cb 01       	movw	r24, r22
 588:	80 95       	com	r24
 58a:	84 23       	and	r24, r20
 58c:	82 bb       	out	0x12, r24	; 18
 58e:	08 95       	ret
		}
		else if(VAL==HIGH)
 590:	41 30       	cpi	r20, 0x01	; 1
 592:	61 f4       	brne	.+24     	; 0x5ac <DIO_WRITE+0x114>
		{
			PORTD |= (1<<PINNO);
 594:	42 b3       	in	r20, 0x12	; 18
 596:	21 e0       	ldi	r18, 0x01	; 1
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	b9 01       	movw	r22, r18
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_WRITE+0x10a>
 59e:	66 0f       	add	r22, r22
 5a0:	77 1f       	adc	r23, r23
 5a2:	8a 95       	dec	r24
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_WRITE+0x106>
 5a6:	cb 01       	movw	r24, r22
 5a8:	84 2b       	or	r24, r20
 5aa:	82 bb       	out	0x12, r24	; 18
 5ac:	08 95       	ret

000005ae <DIO_TOGGLE>:
		break;
	}
	
}
void DIO_TOGGLE(Uint8 PINNO,Uint8 PORTNO ){
	switch(PORTNO){
 5ae:	62 34       	cpi	r22, 0x42	; 66
 5b0:	b1 f0       	breq	.+44     	; 0x5de <DIO_TOGGLE+0x30>
 5b2:	18 f4       	brcc	.+6      	; 0x5ba <DIO_TOGGLE+0xc>
 5b4:	61 34       	cpi	r22, 0x41	; 65
 5b6:	31 f0       	breq	.+12     	; 0x5c4 <DIO_TOGGLE+0x16>
 5b8:	08 95       	ret
 5ba:	63 34       	cpi	r22, 0x43	; 67
 5bc:	e9 f0       	breq	.+58     	; 0x5f8 <DIO_TOGGLE+0x4a>
 5be:	64 34       	cpi	r22, 0x44	; 68
 5c0:	41 f1       	breq	.+80     	; 0x612 <DIO_TOGGLE+0x64>
 5c2:	08 95       	ret
	case PORT_A:
	PORTA^=(1<<PINNO);
 5c4:	4b b3       	in	r20, 0x1b	; 27
 5c6:	21 e0       	ldi	r18, 0x01	; 1
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	b9 01       	movw	r22, r18
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_TOGGLE+0x24>
 5ce:	66 0f       	add	r22, r22
 5d0:	77 1f       	adc	r23, r23
 5d2:	8a 95       	dec	r24
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_TOGGLE+0x20>
 5d6:	cb 01       	movw	r24, r22
 5d8:	84 27       	eor	r24, r20
 5da:	8b bb       	out	0x1b, r24	; 27

	break;
 5dc:	08 95       	ret
	case PORT_B:
	PORTB^=(1<<PINNO);
 5de:	48 b3       	in	r20, 0x18	; 24
 5e0:	21 e0       	ldi	r18, 0x01	; 1
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	b9 01       	movw	r22, r18
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_TOGGLE+0x3e>
 5e8:	66 0f       	add	r22, r22
 5ea:	77 1f       	adc	r23, r23
 5ec:	8a 95       	dec	r24
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_TOGGLE+0x3a>
 5f0:	cb 01       	movw	r24, r22
 5f2:	84 27       	eor	r24, r20
 5f4:	88 bb       	out	0x18, r24	; 24
	
	break;
 5f6:	08 95       	ret
	case PORT_C:
	PORTC^=(1<<PINNO);
 5f8:	45 b3       	in	r20, 0x15	; 21
 5fa:	21 e0       	ldi	r18, 0x01	; 1
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	b9 01       	movw	r22, r18
 600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_TOGGLE+0x58>
 602:	66 0f       	add	r22, r22
 604:	77 1f       	adc	r23, r23
 606:	8a 95       	dec	r24
 608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_TOGGLE+0x54>
 60a:	cb 01       	movw	r24, r22
 60c:	84 27       	eor	r24, r20
 60e:	85 bb       	out	0x15, r24	; 21
	
	break;
 610:	08 95       	ret
	case PORT_D:
	PORTD^=(1<<PINNO);
 612:	42 b3       	in	r20, 0x12	; 18
 614:	21 e0       	ldi	r18, 0x01	; 1
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	b9 01       	movw	r22, r18
 61a:	02 c0       	rjmp	.+4      	; 0x620 <DIO_TOGGLE+0x72>
 61c:	66 0f       	add	r22, r22
 61e:	77 1f       	adc	r23, r23
 620:	8a 95       	dec	r24
 622:	e2 f7       	brpl	.-8      	; 0x61c <DIO_TOGGLE+0x6e>
 624:	cb 01       	movw	r24, r22
 626:	84 27       	eor	r24, r20
 628:	82 bb       	out	0x12, r24	; 18
 62a:	08 95       	ret

0000062c <TIMER_init>:
#include "Timer.h"
#include "../../Utilities/STD.h" 
#include "../../Utilities/BITMATH.h"

void TIMER_init(){
	TCCR0 = 0x00; //normal mode
 62c:	13 be       	out	0x33, r1	; 51
 62e:	08 95       	ret

00000630 <TIMER_delay>:
}

void TIMER_delay(Uint16 millisec){
 630:	8f 92       	push	r8
 632:	9f 92       	push	r9
 634:	af 92       	push	r10
 636:	bf 92       	push	r11
 638:	cf 92       	push	r12
 63a:	df 92       	push	r13
 63c:	ef 92       	push	r14
 63e:	ff 92       	push	r15
 640:	cf 93       	push	r28
 642:	df 93       	push	r29
 644:	ec 01       	movw	r28, r24
	Uint32 overFlowcnt=0;
	Uint16 Noverflows,TimerInitial;
	double Tmaxdelay,Ttick;
	Ttick = 256.0/1000.0; //ms    Ttick = Prescaler/FCPU
	Tmaxdelay= 65.536; //ms		Tmaxdelay = Ttick * 2^8
	if(millisec<Tmaxdelay){
 646:	bc 01       	movw	r22, r24
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	0e 94 ca 04 	call	0x994	; 0x994 <__floatunsisf>
 650:	6b 01       	movw	r12, r22
 652:	7c 01       	movw	r14, r24
 654:	2f e6       	ldi	r18, 0x6F	; 111
 656:	32 e1       	ldi	r19, 0x12	; 18
 658:	43 e8       	ldi	r20, 0x83	; 131
 65a:	52 e4       	ldi	r21, 0x42	; 66
 65c:	0e 94 24 04 	call	0x848	; 0x848 <__cmpsf2>
 660:	88 23       	and	r24, r24
 662:	9c f4       	brge	.+38     	; 0x68a <TIMER_delay+0x5a>
		TimerInitial = (Tmaxdelay-millisec)/Ttick;
 664:	a7 01       	movw	r20, r14
 666:	96 01       	movw	r18, r12
 668:	6f e6       	ldi	r22, 0x6F	; 111
 66a:	72 e1       	ldi	r23, 0x12	; 18
 66c:	83 e8       	ldi	r24, 0x83	; 131
 66e:	92 e4       	ldi	r25, 0x42	; 66
 670:	0e 94 a0 03 	call	0x740	; 0x740 <__subsf3>
 674:	2f e6       	ldi	r18, 0x6F	; 111
 676:	32 e1       	ldi	r19, 0x12	; 18
 678:	43 e8       	ldi	r20, 0x83	; 131
 67a:	5e e3       	ldi	r21, 0x3E	; 62
 67c:	0e 94 29 04 	call	0x852	; 0x852 <__divsf3>
 680:	0e 94 9b 04 	call	0x936	; 0x936 <__fixunssfsi>
		Noverflows = 1;
 684:	c1 e0       	ldi	r28, 0x01	; 1
 686:	d0 e0       	ldi	r29, 0x00	; 0
 688:	35 c0       	rjmp	.+106    	; 0x6f4 <TIMER_delay+0xc4>
		
		}else if(millisec == (int)Tmaxdelay){
 68a:	c1 34       	cpi	r28, 0x41	; 65
 68c:	d1 05       	cpc	r29, r1
 68e:	79 f1       	breq	.+94     	; 0x6ee <TIMER_delay+0xbe>
		TimerInitial=0;
		Noverflows=1;
		}else{
		Noverflows = ceil((double)millisec/Tmaxdelay);
 690:	2f e6       	ldi	r18, 0x6F	; 111
 692:	32 e1       	ldi	r19, 0x12	; 18
 694:	43 e8       	ldi	r20, 0x83	; 131
 696:	52 e4       	ldi	r21, 0x42	; 66
 698:	c7 01       	movw	r24, r14
 69a:	b6 01       	movw	r22, r12
 69c:	0e 94 29 04 	call	0x852	; 0x852 <__divsf3>
 6a0:	0e 94 0d 04 	call	0x81a	; 0x81a <ceil>
 6a4:	0e 94 9b 04 	call	0x936	; 0x936 <__fixunssfsi>
 6a8:	4b 01       	movw	r8, r22
 6aa:	5c 01       	movw	r10, r24
 6ac:	eb 01       	movw	r28, r22
		TimerInitial = (1<<8) - ((double)millisec/Ttick)/Noverflows;
 6ae:	2f e6       	ldi	r18, 0x6F	; 111
 6b0:	32 e1       	ldi	r19, 0x12	; 18
 6b2:	43 e8       	ldi	r20, 0x83	; 131
 6b4:	5e e3       	ldi	r21, 0x3E	; 62
 6b6:	c7 01       	movw	r24, r14
 6b8:	b6 01       	movw	r22, r12
 6ba:	0e 94 29 04 	call	0x852	; 0x852 <__divsf3>
 6be:	6b 01       	movw	r12, r22
 6c0:	7c 01       	movw	r14, r24
 6c2:	b4 01       	movw	r22, r8
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	0e 94 ca 04 	call	0x994	; 0x994 <__floatunsisf>
 6cc:	9b 01       	movw	r18, r22
 6ce:	ac 01       	movw	r20, r24
 6d0:	c7 01       	movw	r24, r14
 6d2:	b6 01       	movw	r22, r12
 6d4:	0e 94 29 04 	call	0x852	; 0x852 <__divsf3>
 6d8:	9b 01       	movw	r18, r22
 6da:	ac 01       	movw	r20, r24
 6dc:	60 e0       	ldi	r22, 0x00	; 0
 6de:	70 e0       	ldi	r23, 0x00	; 0
 6e0:	80 e8       	ldi	r24, 0x80	; 128
 6e2:	93 e4       	ldi	r25, 0x43	; 67
 6e4:	0e 94 a0 03 	call	0x740	; 0x740 <__subsf3>
 6e8:	0e 94 9b 04 	call	0x936	; 0x936 <__fixunssfsi>
 6ec:	03 c0       	rjmp	.+6      	; 0x6f4 <TIMER_delay+0xc4>
	if(millisec<Tmaxdelay){
		TimerInitial = (Tmaxdelay-millisec)/Ttick;
		Noverflows = 1;
		
		}else if(millisec == (int)Tmaxdelay){
		TimerInitial=0;
 6ee:	60 e0       	ldi	r22, 0x00	; 0
		Noverflows=1;
 6f0:	c1 e0       	ldi	r28, 0x01	; 1
 6f2:	d0 e0       	ldi	r29, 0x00	; 0
		}else{
		Noverflows = ceil((double)millisec/Tmaxdelay);
		TimerInitial = (1<<8) - ((double)millisec/Ttick)/Noverflows;
		
	}
	TCNT0 = TimerInitial;
 6f4:	62 bf       	out	0x32, r22	; 50
	TCCR0 |= (1<<2); //set 256 prescaler
 6f6:	83 b7       	in	r24, 0x33	; 51
 6f8:	84 60       	ori	r24, 0x04	; 4
 6fa:	83 bf       	out	0x33, r24	; 51
void TIMER_init(){
	TCCR0 = 0x00; //normal mode
}

void TIMER_delay(Uint16 millisec){
	Uint32 overFlowcnt=0;
 6fc:	40 e0       	ldi	r20, 0x00	; 0
 6fe:	50 e0       	ldi	r21, 0x00	; 0
 700:	ba 01       	movw	r22, r20
		TimerInitial = (1<<8) - ((double)millisec/Ttick)/Noverflows;
		
	}
	TCNT0 = TimerInitial;
	TCCR0 |= (1<<2); //set 256 prescaler
	while(overFlowcnt<Noverflows){
 702:	0a c0       	rjmp	.+20     	; 0x718 <TIMER_delay+0xe8>
		//busy wait
		while(READ_BIT(TIFR,0)==0);
 704:	08 b6       	in	r0, 0x38	; 56
 706:	00 fe       	sbrs	r0, 0
 708:	fd cf       	rjmp	.-6      	; 0x704 <TIMER_delay+0xd4>
		//clear overflow flag
		SET_BIT(TIFR,0);
 70a:	88 b7       	in	r24, 0x38	; 56
 70c:	81 60       	ori	r24, 0x01	; 1
 70e:	88 bf       	out	0x38, r24	; 56
		//increment counter
		overFlowcnt++;
 710:	4f 5f       	subi	r20, 0xFF	; 255
 712:	5f 4f       	sbci	r21, 0xFF	; 255
 714:	6f 4f       	sbci	r22, 0xFF	; 255
 716:	7f 4f       	sbci	r23, 0xFF	; 255
		TimerInitial = (1<<8) - ((double)millisec/Ttick)/Noverflows;
		
	}
	TCNT0 = TimerInitial;
	TCCR0 |= (1<<2); //set 256 prescaler
	while(overFlowcnt<Noverflows){
 718:	ce 01       	movw	r24, r28
 71a:	a0 e0       	ldi	r26, 0x00	; 0
 71c:	b0 e0       	ldi	r27, 0x00	; 0
 71e:	48 17       	cp	r20, r24
 720:	59 07       	cpc	r21, r25
 722:	6a 07       	cpc	r22, r26
 724:	7b 07       	cpc	r23, r27
 726:	70 f3       	brcs	.-36     	; 0x704 <TIMER_delay+0xd4>
		SET_BIT(TIFR,0);
		//increment counter
		overFlowcnt++;
	}
	//Timer stop
	TCCR0 = 0x00;
 728:	13 be       	out	0x33, r1	; 51
}
 72a:	df 91       	pop	r29
 72c:	cf 91       	pop	r28
 72e:	ff 90       	pop	r15
 730:	ef 90       	pop	r14
 732:	df 90       	pop	r13
 734:	cf 90       	pop	r12
 736:	bf 90       	pop	r11
 738:	af 90       	pop	r10
 73a:	9f 90       	pop	r9
 73c:	8f 90       	pop	r8
 73e:	08 95       	ret

00000740 <__subsf3>:
 740:	50 58       	subi	r21, 0x80	; 128

00000742 <__addsf3>:
 742:	bb 27       	eor	r27, r27
 744:	aa 27       	eor	r26, r26
 746:	0e 94 b8 03 	call	0x770	; 0x770 <__addsf3x>
 74a:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_round>
 74e:	0e 94 5d 05 	call	0xaba	; 0xaba <__fp_pscA>
 752:	38 f0       	brcs	.+14     	; 0x762 <__addsf3+0x20>
 754:	0e 94 64 05 	call	0xac8	; 0xac8 <__fp_pscB>
 758:	20 f0       	brcs	.+8      	; 0x762 <__addsf3+0x20>
 75a:	39 f4       	brne	.+14     	; 0x76a <__addsf3+0x28>
 75c:	9f 3f       	cpi	r25, 0xFF	; 255
 75e:	19 f4       	brne	.+6      	; 0x766 <__addsf3+0x24>
 760:	26 f4       	brtc	.+8      	; 0x76a <__addsf3+0x28>
 762:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_nan>
 766:	0e f4       	brtc	.+2      	; 0x76a <__addsf3+0x28>
 768:	e0 95       	com	r30
 76a:	e7 fb       	bst	r30, 7
 76c:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__fp_inf>

00000770 <__addsf3x>:
 770:	e9 2f       	mov	r30, r25
 772:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_split3>
 776:	58 f3       	brcs	.-42     	; 0x74e <__addsf3+0xc>
 778:	ba 17       	cp	r27, r26
 77a:	62 07       	cpc	r22, r18
 77c:	73 07       	cpc	r23, r19
 77e:	84 07       	cpc	r24, r20
 780:	95 07       	cpc	r25, r21
 782:	20 f0       	brcs	.+8      	; 0x78c <__addsf3x+0x1c>
 784:	79 f4       	brne	.+30     	; 0x7a4 <__addsf3x+0x34>
 786:	a6 f5       	brtc	.+104    	; 0x7f0 <__addsf3x+0x80>
 788:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__fp_zero>
 78c:	0e f4       	brtc	.+2      	; 0x790 <__addsf3x+0x20>
 78e:	e0 95       	com	r30
 790:	0b 2e       	mov	r0, r27
 792:	ba 2f       	mov	r27, r26
 794:	a0 2d       	mov	r26, r0
 796:	0b 01       	movw	r0, r22
 798:	b9 01       	movw	r22, r18
 79a:	90 01       	movw	r18, r0
 79c:	0c 01       	movw	r0, r24
 79e:	ca 01       	movw	r24, r20
 7a0:	a0 01       	movw	r20, r0
 7a2:	11 24       	eor	r1, r1
 7a4:	ff 27       	eor	r31, r31
 7a6:	59 1b       	sub	r21, r25
 7a8:	99 f0       	breq	.+38     	; 0x7d0 <__addsf3x+0x60>
 7aa:	59 3f       	cpi	r21, 0xF9	; 249
 7ac:	50 f4       	brcc	.+20     	; 0x7c2 <__addsf3x+0x52>
 7ae:	50 3e       	cpi	r21, 0xE0	; 224
 7b0:	68 f1       	brcs	.+90     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7b2:	1a 16       	cp	r1, r26
 7b4:	f0 40       	sbci	r31, 0x00	; 0
 7b6:	a2 2f       	mov	r26, r18
 7b8:	23 2f       	mov	r18, r19
 7ba:	34 2f       	mov	r19, r20
 7bc:	44 27       	eor	r20, r20
 7be:	58 5f       	subi	r21, 0xF8	; 248
 7c0:	f3 cf       	rjmp	.-26     	; 0x7a8 <__addsf3x+0x38>
 7c2:	46 95       	lsr	r20
 7c4:	37 95       	ror	r19
 7c6:	27 95       	ror	r18
 7c8:	a7 95       	ror	r26
 7ca:	f0 40       	sbci	r31, 0x00	; 0
 7cc:	53 95       	inc	r21
 7ce:	c9 f7       	brne	.-14     	; 0x7c2 <__addsf3x+0x52>
 7d0:	7e f4       	brtc	.+30     	; 0x7f0 <__addsf3x+0x80>
 7d2:	1f 16       	cp	r1, r31
 7d4:	ba 0b       	sbc	r27, r26
 7d6:	62 0b       	sbc	r22, r18
 7d8:	73 0b       	sbc	r23, r19
 7da:	84 0b       	sbc	r24, r20
 7dc:	ba f0       	brmi	.+46     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7de:	91 50       	subi	r25, 0x01	; 1
 7e0:	a1 f0       	breq	.+40     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7e2:	ff 0f       	add	r31, r31
 7e4:	bb 1f       	adc	r27, r27
 7e6:	66 1f       	adc	r22, r22
 7e8:	77 1f       	adc	r23, r23
 7ea:	88 1f       	adc	r24, r24
 7ec:	c2 f7       	brpl	.-16     	; 0x7de <__addsf3x+0x6e>
 7ee:	0e c0       	rjmp	.+28     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7f0:	ba 0f       	add	r27, r26
 7f2:	62 1f       	adc	r22, r18
 7f4:	73 1f       	adc	r23, r19
 7f6:	84 1f       	adc	r24, r20
 7f8:	48 f4       	brcc	.+18     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7fa:	87 95       	ror	r24
 7fc:	77 95       	ror	r23
 7fe:	67 95       	ror	r22
 800:	b7 95       	ror	r27
 802:	f7 95       	ror	r31
 804:	9e 3f       	cpi	r25, 0xFE	; 254
 806:	08 f0       	brcs	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 808:	b0 cf       	rjmp	.-160    	; 0x76a <__addsf3+0x28>
 80a:	93 95       	inc	r25
 80c:	88 0f       	add	r24, r24
 80e:	08 f0       	brcs	.+2      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 810:	99 27       	eor	r25, r25
 812:	ee 0f       	add	r30, r30
 814:	97 95       	ror	r25
 816:	87 95       	ror	r24
 818:	08 95       	ret

0000081a <ceil>:
 81a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__fp_trunc>
 81e:	90 f0       	brcs	.+36     	; 0x844 <ceil+0x2a>
 820:	9f 37       	cpi	r25, 0x7F	; 127
 822:	48 f4       	brcc	.+18     	; 0x836 <ceil+0x1c>
 824:	91 11       	cpse	r25, r1
 826:	16 f4       	brtc	.+4      	; 0x82c <ceil+0x12>
 828:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_szero>
 82c:	60 e0       	ldi	r22, 0x00	; 0
 82e:	70 e0       	ldi	r23, 0x00	; 0
 830:	80 e8       	ldi	r24, 0x80	; 128
 832:	9f e3       	ldi	r25, 0x3F	; 63
 834:	08 95       	ret
 836:	26 f0       	brts	.+8      	; 0x840 <ceil+0x26>
 838:	1b 16       	cp	r1, r27
 83a:	61 1d       	adc	r22, r1
 83c:	71 1d       	adc	r23, r1
 83e:	81 1d       	adc	r24, r1
 840:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__fp_mintl>
 844:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__fp_mpack>

00000848 <__cmpsf2>:
 848:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fp_cmp>
 84c:	08 f4       	brcc	.+2      	; 0x850 <__cmpsf2+0x8>
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	08 95       	ret

00000852 <__divsf3>:
 852:	0e 94 3d 04 	call	0x87a	; 0x87a <__divsf3x>
 856:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_round>
 85a:	0e 94 64 05 	call	0xac8	; 0xac8 <__fp_pscB>
 85e:	58 f0       	brcs	.+22     	; 0x876 <__stack+0x17>
 860:	0e 94 5d 05 	call	0xaba	; 0xaba <__fp_pscA>
 864:	40 f0       	brcs	.+16     	; 0x876 <__stack+0x17>
 866:	29 f4       	brne	.+10     	; 0x872 <__stack+0x13>
 868:	5f 3f       	cpi	r21, 0xFF	; 255
 86a:	29 f0       	breq	.+10     	; 0x876 <__stack+0x17>
 86c:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__fp_inf>
 870:	51 11       	cpse	r21, r1
 872:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_szero>
 876:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_nan>

0000087a <__divsf3x>:
 87a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_split3>
 87e:	68 f3       	brcs	.-38     	; 0x85a <__divsf3+0x8>

00000880 <__divsf3_pse>:
 880:	99 23       	and	r25, r25
 882:	b1 f3       	breq	.-20     	; 0x870 <__stack+0x11>
 884:	55 23       	and	r21, r21
 886:	91 f3       	breq	.-28     	; 0x86c <__stack+0xd>
 888:	95 1b       	sub	r25, r21
 88a:	55 0b       	sbc	r21, r21
 88c:	bb 27       	eor	r27, r27
 88e:	aa 27       	eor	r26, r26
 890:	62 17       	cp	r22, r18
 892:	73 07       	cpc	r23, r19
 894:	84 07       	cpc	r24, r20
 896:	38 f0       	brcs	.+14     	; 0x8a6 <__divsf3_pse+0x26>
 898:	9f 5f       	subi	r25, 0xFF	; 255
 89a:	5f 4f       	sbci	r21, 0xFF	; 255
 89c:	22 0f       	add	r18, r18
 89e:	33 1f       	adc	r19, r19
 8a0:	44 1f       	adc	r20, r20
 8a2:	aa 1f       	adc	r26, r26
 8a4:	a9 f3       	breq	.-22     	; 0x890 <__divsf3_pse+0x10>
 8a6:	35 d0       	rcall	.+106    	; 0x912 <__divsf3_pse+0x92>
 8a8:	0e 2e       	mov	r0, r30
 8aa:	3a f0       	brmi	.+14     	; 0x8ba <__divsf3_pse+0x3a>
 8ac:	e0 e8       	ldi	r30, 0x80	; 128
 8ae:	32 d0       	rcall	.+100    	; 0x914 <__divsf3_pse+0x94>
 8b0:	91 50       	subi	r25, 0x01	; 1
 8b2:	50 40       	sbci	r21, 0x00	; 0
 8b4:	e6 95       	lsr	r30
 8b6:	00 1c       	adc	r0, r0
 8b8:	ca f7       	brpl	.-14     	; 0x8ac <__divsf3_pse+0x2c>
 8ba:	2b d0       	rcall	.+86     	; 0x912 <__divsf3_pse+0x92>
 8bc:	fe 2f       	mov	r31, r30
 8be:	29 d0       	rcall	.+82     	; 0x912 <__divsf3_pse+0x92>
 8c0:	66 0f       	add	r22, r22
 8c2:	77 1f       	adc	r23, r23
 8c4:	88 1f       	adc	r24, r24
 8c6:	bb 1f       	adc	r27, r27
 8c8:	26 17       	cp	r18, r22
 8ca:	37 07       	cpc	r19, r23
 8cc:	48 07       	cpc	r20, r24
 8ce:	ab 07       	cpc	r26, r27
 8d0:	b0 e8       	ldi	r27, 0x80	; 128
 8d2:	09 f0       	breq	.+2      	; 0x8d6 <__divsf3_pse+0x56>
 8d4:	bb 0b       	sbc	r27, r27
 8d6:	80 2d       	mov	r24, r0
 8d8:	bf 01       	movw	r22, r30
 8da:	ff 27       	eor	r31, r31
 8dc:	93 58       	subi	r25, 0x83	; 131
 8de:	5f 4f       	sbci	r21, 0xFF	; 255
 8e0:	3a f0       	brmi	.+14     	; 0x8f0 <__divsf3_pse+0x70>
 8e2:	9e 3f       	cpi	r25, 0xFE	; 254
 8e4:	51 05       	cpc	r21, r1
 8e6:	78 f0       	brcs	.+30     	; 0x906 <__divsf3_pse+0x86>
 8e8:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__fp_inf>
 8ec:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_szero>
 8f0:	5f 3f       	cpi	r21, 0xFF	; 255
 8f2:	e4 f3       	brlt	.-8      	; 0x8ec <__divsf3_pse+0x6c>
 8f4:	98 3e       	cpi	r25, 0xE8	; 232
 8f6:	d4 f3       	brlt	.-12     	; 0x8ec <__divsf3_pse+0x6c>
 8f8:	86 95       	lsr	r24
 8fa:	77 95       	ror	r23
 8fc:	67 95       	ror	r22
 8fe:	b7 95       	ror	r27
 900:	f7 95       	ror	r31
 902:	9f 5f       	subi	r25, 0xFF	; 255
 904:	c9 f7       	brne	.-14     	; 0x8f8 <__divsf3_pse+0x78>
 906:	88 0f       	add	r24, r24
 908:	91 1d       	adc	r25, r1
 90a:	96 95       	lsr	r25
 90c:	87 95       	ror	r24
 90e:	97 f9       	bld	r25, 7
 910:	08 95       	ret
 912:	e1 e0       	ldi	r30, 0x01	; 1
 914:	66 0f       	add	r22, r22
 916:	77 1f       	adc	r23, r23
 918:	88 1f       	adc	r24, r24
 91a:	bb 1f       	adc	r27, r27
 91c:	62 17       	cp	r22, r18
 91e:	73 07       	cpc	r23, r19
 920:	84 07       	cpc	r24, r20
 922:	ba 07       	cpc	r27, r26
 924:	20 f0       	brcs	.+8      	; 0x92e <__divsf3_pse+0xae>
 926:	62 1b       	sub	r22, r18
 928:	73 0b       	sbc	r23, r19
 92a:	84 0b       	sbc	r24, r20
 92c:	ba 0b       	sbc	r27, r26
 92e:	ee 1f       	adc	r30, r30
 930:	88 f7       	brcc	.-30     	; 0x914 <__divsf3_pse+0x94>
 932:	e0 95       	com	r30
 934:	08 95       	ret

00000936 <__fixunssfsi>:
 936:	0e 94 84 05 	call	0xb08	; 0xb08 <__fp_splitA>
 93a:	88 f0       	brcs	.+34     	; 0x95e <__fixunssfsi+0x28>
 93c:	9f 57       	subi	r25, 0x7F	; 127
 93e:	98 f0       	brcs	.+38     	; 0x966 <__fixunssfsi+0x30>
 940:	b9 2f       	mov	r27, r25
 942:	99 27       	eor	r25, r25
 944:	b7 51       	subi	r27, 0x17	; 23
 946:	b0 f0       	brcs	.+44     	; 0x974 <__fixunssfsi+0x3e>
 948:	e1 f0       	breq	.+56     	; 0x982 <__fixunssfsi+0x4c>
 94a:	66 0f       	add	r22, r22
 94c:	77 1f       	adc	r23, r23
 94e:	88 1f       	adc	r24, r24
 950:	99 1f       	adc	r25, r25
 952:	1a f0       	brmi	.+6      	; 0x95a <__fixunssfsi+0x24>
 954:	ba 95       	dec	r27
 956:	c9 f7       	brne	.-14     	; 0x94a <__fixunssfsi+0x14>
 958:	14 c0       	rjmp	.+40     	; 0x982 <__fixunssfsi+0x4c>
 95a:	b1 30       	cpi	r27, 0x01	; 1
 95c:	91 f0       	breq	.+36     	; 0x982 <__fixunssfsi+0x4c>
 95e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__fp_zero>
 962:	b1 e0       	ldi	r27, 0x01	; 1
 964:	08 95       	ret
 966:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__fp_zero>
 96a:	67 2f       	mov	r22, r23
 96c:	78 2f       	mov	r23, r24
 96e:	88 27       	eor	r24, r24
 970:	b8 5f       	subi	r27, 0xF8	; 248
 972:	39 f0       	breq	.+14     	; 0x982 <__fixunssfsi+0x4c>
 974:	b9 3f       	cpi	r27, 0xF9	; 249
 976:	cc f3       	brlt	.-14     	; 0x96a <__fixunssfsi+0x34>
 978:	86 95       	lsr	r24
 97a:	77 95       	ror	r23
 97c:	67 95       	ror	r22
 97e:	b3 95       	inc	r27
 980:	d9 f7       	brne	.-10     	; 0x978 <__fixunssfsi+0x42>
 982:	3e f4       	brtc	.+14     	; 0x992 <__fixunssfsi+0x5c>
 984:	90 95       	com	r25
 986:	80 95       	com	r24
 988:	70 95       	com	r23
 98a:	61 95       	neg	r22
 98c:	7f 4f       	sbci	r23, 0xFF	; 255
 98e:	8f 4f       	sbci	r24, 0xFF	; 255
 990:	9f 4f       	sbci	r25, 0xFF	; 255
 992:	08 95       	ret

00000994 <__floatunsisf>:
 994:	e8 94       	clt
 996:	09 c0       	rjmp	.+18     	; 0x9aa <__floatsisf+0x12>

00000998 <__floatsisf>:
 998:	97 fb       	bst	r25, 7
 99a:	3e f4       	brtc	.+14     	; 0x9aa <__floatsisf+0x12>
 99c:	90 95       	com	r25
 99e:	80 95       	com	r24
 9a0:	70 95       	com	r23
 9a2:	61 95       	neg	r22
 9a4:	7f 4f       	sbci	r23, 0xFF	; 255
 9a6:	8f 4f       	sbci	r24, 0xFF	; 255
 9a8:	9f 4f       	sbci	r25, 0xFF	; 255
 9aa:	99 23       	and	r25, r25
 9ac:	a9 f0       	breq	.+42     	; 0x9d8 <__floatsisf+0x40>
 9ae:	f9 2f       	mov	r31, r25
 9b0:	96 e9       	ldi	r25, 0x96	; 150
 9b2:	bb 27       	eor	r27, r27
 9b4:	93 95       	inc	r25
 9b6:	f6 95       	lsr	r31
 9b8:	87 95       	ror	r24
 9ba:	77 95       	ror	r23
 9bc:	67 95       	ror	r22
 9be:	b7 95       	ror	r27
 9c0:	f1 11       	cpse	r31, r1
 9c2:	f8 cf       	rjmp	.-16     	; 0x9b4 <__floatsisf+0x1c>
 9c4:	fa f4       	brpl	.+62     	; 0xa04 <__floatsisf+0x6c>
 9c6:	bb 0f       	add	r27, r27
 9c8:	11 f4       	brne	.+4      	; 0x9ce <__floatsisf+0x36>
 9ca:	60 ff       	sbrs	r22, 0
 9cc:	1b c0       	rjmp	.+54     	; 0xa04 <__floatsisf+0x6c>
 9ce:	6f 5f       	subi	r22, 0xFF	; 255
 9d0:	7f 4f       	sbci	r23, 0xFF	; 255
 9d2:	8f 4f       	sbci	r24, 0xFF	; 255
 9d4:	9f 4f       	sbci	r25, 0xFF	; 255
 9d6:	16 c0       	rjmp	.+44     	; 0xa04 <__floatsisf+0x6c>
 9d8:	88 23       	and	r24, r24
 9da:	11 f0       	breq	.+4      	; 0x9e0 <__floatsisf+0x48>
 9dc:	96 e9       	ldi	r25, 0x96	; 150
 9de:	11 c0       	rjmp	.+34     	; 0xa02 <__floatsisf+0x6a>
 9e0:	77 23       	and	r23, r23
 9e2:	21 f0       	breq	.+8      	; 0x9ec <__floatsisf+0x54>
 9e4:	9e e8       	ldi	r25, 0x8E	; 142
 9e6:	87 2f       	mov	r24, r23
 9e8:	76 2f       	mov	r23, r22
 9ea:	05 c0       	rjmp	.+10     	; 0x9f6 <__floatsisf+0x5e>
 9ec:	66 23       	and	r22, r22
 9ee:	71 f0       	breq	.+28     	; 0xa0c <__floatsisf+0x74>
 9f0:	96 e8       	ldi	r25, 0x86	; 134
 9f2:	86 2f       	mov	r24, r22
 9f4:	70 e0       	ldi	r23, 0x00	; 0
 9f6:	60 e0       	ldi	r22, 0x00	; 0
 9f8:	2a f0       	brmi	.+10     	; 0xa04 <__floatsisf+0x6c>
 9fa:	9a 95       	dec	r25
 9fc:	66 0f       	add	r22, r22
 9fe:	77 1f       	adc	r23, r23
 a00:	88 1f       	adc	r24, r24
 a02:	da f7       	brpl	.-10     	; 0x9fa <__floatsisf+0x62>
 a04:	88 0f       	add	r24, r24
 a06:	96 95       	lsr	r25
 a08:	87 95       	ror	r24
 a0a:	97 f9       	bld	r25, 7
 a0c:	08 95       	ret

00000a0e <__fp_cmp>:
 a0e:	99 0f       	add	r25, r25
 a10:	00 08       	sbc	r0, r0
 a12:	55 0f       	add	r21, r21
 a14:	aa 0b       	sbc	r26, r26
 a16:	e0 e8       	ldi	r30, 0x80	; 128
 a18:	fe ef       	ldi	r31, 0xFE	; 254
 a1a:	16 16       	cp	r1, r22
 a1c:	17 06       	cpc	r1, r23
 a1e:	e8 07       	cpc	r30, r24
 a20:	f9 07       	cpc	r31, r25
 a22:	c0 f0       	brcs	.+48     	; 0xa54 <__fp_cmp+0x46>
 a24:	12 16       	cp	r1, r18
 a26:	13 06       	cpc	r1, r19
 a28:	e4 07       	cpc	r30, r20
 a2a:	f5 07       	cpc	r31, r21
 a2c:	98 f0       	brcs	.+38     	; 0xa54 <__fp_cmp+0x46>
 a2e:	62 1b       	sub	r22, r18
 a30:	73 0b       	sbc	r23, r19
 a32:	84 0b       	sbc	r24, r20
 a34:	95 0b       	sbc	r25, r21
 a36:	39 f4       	brne	.+14     	; 0xa46 <__fp_cmp+0x38>
 a38:	0a 26       	eor	r0, r26
 a3a:	61 f0       	breq	.+24     	; 0xa54 <__fp_cmp+0x46>
 a3c:	23 2b       	or	r18, r19
 a3e:	24 2b       	or	r18, r20
 a40:	25 2b       	or	r18, r21
 a42:	21 f4       	brne	.+8      	; 0xa4c <__fp_cmp+0x3e>
 a44:	08 95       	ret
 a46:	0a 26       	eor	r0, r26
 a48:	09 f4       	brne	.+2      	; 0xa4c <__fp_cmp+0x3e>
 a4a:	a1 40       	sbci	r26, 0x01	; 1
 a4c:	a6 95       	lsr	r26
 a4e:	8f ef       	ldi	r24, 0xFF	; 255
 a50:	81 1d       	adc	r24, r1
 a52:	81 1d       	adc	r24, r1
 a54:	08 95       	ret

00000a56 <__fp_inf>:
 a56:	97 f9       	bld	r25, 7
 a58:	9f 67       	ori	r25, 0x7F	; 127
 a5a:	80 e8       	ldi	r24, 0x80	; 128
 a5c:	70 e0       	ldi	r23, 0x00	; 0
 a5e:	60 e0       	ldi	r22, 0x00	; 0
 a60:	08 95       	ret

00000a62 <__fp_mintl>:
 a62:	88 23       	and	r24, r24
 a64:	71 f4       	brne	.+28     	; 0xa82 <__fp_mintl+0x20>
 a66:	77 23       	and	r23, r23
 a68:	21 f0       	breq	.+8      	; 0xa72 <__fp_mintl+0x10>
 a6a:	98 50       	subi	r25, 0x08	; 8
 a6c:	87 2b       	or	r24, r23
 a6e:	76 2f       	mov	r23, r22
 a70:	07 c0       	rjmp	.+14     	; 0xa80 <__fp_mintl+0x1e>
 a72:	66 23       	and	r22, r22
 a74:	11 f4       	brne	.+4      	; 0xa7a <__fp_mintl+0x18>
 a76:	99 27       	eor	r25, r25
 a78:	0d c0       	rjmp	.+26     	; 0xa94 <__fp_mintl+0x32>
 a7a:	90 51       	subi	r25, 0x10	; 16
 a7c:	86 2b       	or	r24, r22
 a7e:	70 e0       	ldi	r23, 0x00	; 0
 a80:	60 e0       	ldi	r22, 0x00	; 0
 a82:	2a f0       	brmi	.+10     	; 0xa8e <__fp_mintl+0x2c>
 a84:	9a 95       	dec	r25
 a86:	66 0f       	add	r22, r22
 a88:	77 1f       	adc	r23, r23
 a8a:	88 1f       	adc	r24, r24
 a8c:	da f7       	brpl	.-10     	; 0xa84 <__fp_mintl+0x22>
 a8e:	88 0f       	add	r24, r24
 a90:	96 95       	lsr	r25
 a92:	87 95       	ror	r24
 a94:	97 f9       	bld	r25, 7
 a96:	08 95       	ret

00000a98 <__fp_mpack>:
 a98:	9f 3f       	cpi	r25, 0xFF	; 255
 a9a:	31 f0       	breq	.+12     	; 0xaa8 <__fp_mpack_finite+0xc>

00000a9c <__fp_mpack_finite>:
 a9c:	91 50       	subi	r25, 0x01	; 1
 a9e:	20 f4       	brcc	.+8      	; 0xaa8 <__fp_mpack_finite+0xc>
 aa0:	87 95       	ror	r24
 aa2:	77 95       	ror	r23
 aa4:	67 95       	ror	r22
 aa6:	b7 95       	ror	r27
 aa8:	88 0f       	add	r24, r24
 aaa:	91 1d       	adc	r25, r1
 aac:	96 95       	lsr	r25
 aae:	87 95       	ror	r24
 ab0:	97 f9       	bld	r25, 7
 ab2:	08 95       	ret

00000ab4 <__fp_nan>:
 ab4:	9f ef       	ldi	r25, 0xFF	; 255
 ab6:	80 ec       	ldi	r24, 0xC0	; 192
 ab8:	08 95       	ret

00000aba <__fp_pscA>:
 aba:	00 24       	eor	r0, r0
 abc:	0a 94       	dec	r0
 abe:	16 16       	cp	r1, r22
 ac0:	17 06       	cpc	r1, r23
 ac2:	18 06       	cpc	r1, r24
 ac4:	09 06       	cpc	r0, r25
 ac6:	08 95       	ret

00000ac8 <__fp_pscB>:
 ac8:	00 24       	eor	r0, r0
 aca:	0a 94       	dec	r0
 acc:	12 16       	cp	r1, r18
 ace:	13 06       	cpc	r1, r19
 ad0:	14 06       	cpc	r1, r20
 ad2:	05 06       	cpc	r0, r21
 ad4:	08 95       	ret

00000ad6 <__fp_round>:
 ad6:	09 2e       	mov	r0, r25
 ad8:	03 94       	inc	r0
 ada:	00 0c       	add	r0, r0
 adc:	11 f4       	brne	.+4      	; 0xae2 <__fp_round+0xc>
 ade:	88 23       	and	r24, r24
 ae0:	52 f0       	brmi	.+20     	; 0xaf6 <__fp_round+0x20>
 ae2:	bb 0f       	add	r27, r27
 ae4:	40 f4       	brcc	.+16     	; 0xaf6 <__fp_round+0x20>
 ae6:	bf 2b       	or	r27, r31
 ae8:	11 f4       	brne	.+4      	; 0xaee <__fp_round+0x18>
 aea:	60 ff       	sbrs	r22, 0
 aec:	04 c0       	rjmp	.+8      	; 0xaf6 <__fp_round+0x20>
 aee:	6f 5f       	subi	r22, 0xFF	; 255
 af0:	7f 4f       	sbci	r23, 0xFF	; 255
 af2:	8f 4f       	sbci	r24, 0xFF	; 255
 af4:	9f 4f       	sbci	r25, 0xFF	; 255
 af6:	08 95       	ret

00000af8 <__fp_split3>:
 af8:	57 fd       	sbrc	r21, 7
 afa:	90 58       	subi	r25, 0x80	; 128
 afc:	44 0f       	add	r20, r20
 afe:	55 1f       	adc	r21, r21
 b00:	59 f0       	breq	.+22     	; 0xb18 <__fp_splitA+0x10>
 b02:	5f 3f       	cpi	r21, 0xFF	; 255
 b04:	71 f0       	breq	.+28     	; 0xb22 <__fp_splitA+0x1a>
 b06:	47 95       	ror	r20

00000b08 <__fp_splitA>:
 b08:	88 0f       	add	r24, r24
 b0a:	97 fb       	bst	r25, 7
 b0c:	99 1f       	adc	r25, r25
 b0e:	61 f0       	breq	.+24     	; 0xb28 <__fp_splitA+0x20>
 b10:	9f 3f       	cpi	r25, 0xFF	; 255
 b12:	79 f0       	breq	.+30     	; 0xb32 <__fp_splitA+0x2a>
 b14:	87 95       	ror	r24
 b16:	08 95       	ret
 b18:	12 16       	cp	r1, r18
 b1a:	13 06       	cpc	r1, r19
 b1c:	14 06       	cpc	r1, r20
 b1e:	55 1f       	adc	r21, r21
 b20:	f2 cf       	rjmp	.-28     	; 0xb06 <__fp_split3+0xe>
 b22:	46 95       	lsr	r20
 b24:	f1 df       	rcall	.-30     	; 0xb08 <__fp_splitA>
 b26:	08 c0       	rjmp	.+16     	; 0xb38 <__fp_splitA+0x30>
 b28:	16 16       	cp	r1, r22
 b2a:	17 06       	cpc	r1, r23
 b2c:	18 06       	cpc	r1, r24
 b2e:	99 1f       	adc	r25, r25
 b30:	f1 cf       	rjmp	.-30     	; 0xb14 <__fp_splitA+0xc>
 b32:	86 95       	lsr	r24
 b34:	71 05       	cpc	r23, r1
 b36:	61 05       	cpc	r22, r1
 b38:	08 94       	sec
 b3a:	08 95       	ret

00000b3c <__fp_trunc>:
 b3c:	0e 94 84 05 	call	0xb08	; 0xb08 <__fp_splitA>
 b40:	a0 f0       	brcs	.+40     	; 0xb6a <__fp_trunc+0x2e>
 b42:	be e7       	ldi	r27, 0x7E	; 126
 b44:	b9 17       	cp	r27, r25
 b46:	88 f4       	brcc	.+34     	; 0xb6a <__fp_trunc+0x2e>
 b48:	bb 27       	eor	r27, r27
 b4a:	9f 38       	cpi	r25, 0x8F	; 143
 b4c:	60 f4       	brcc	.+24     	; 0xb66 <__fp_trunc+0x2a>
 b4e:	16 16       	cp	r1, r22
 b50:	b1 1d       	adc	r27, r1
 b52:	67 2f       	mov	r22, r23
 b54:	78 2f       	mov	r23, r24
 b56:	88 27       	eor	r24, r24
 b58:	98 5f       	subi	r25, 0xF8	; 248
 b5a:	f7 cf       	rjmp	.-18     	; 0xb4a <__fp_trunc+0xe>
 b5c:	86 95       	lsr	r24
 b5e:	77 95       	ror	r23
 b60:	67 95       	ror	r22
 b62:	b1 1d       	adc	r27, r1
 b64:	93 95       	inc	r25
 b66:	96 39       	cpi	r25, 0x96	; 150
 b68:	c8 f3       	brcs	.-14     	; 0xb5c <__fp_trunc+0x20>
 b6a:	08 95       	ret

00000b6c <__fp_zero>:
 b6c:	e8 94       	clt

00000b6e <__fp_szero>:
 b6e:	bb 27       	eor	r27, r27
 b70:	66 27       	eor	r22, r22
 b72:	77 27       	eor	r23, r23
 b74:	cb 01       	movw	r24, r22
 b76:	97 f9       	bld	r25, 7
 b78:	08 95       	ret

00000b7a <_exit>:
 b7a:	f8 94       	cli

00000b7c <__stop_program>:
 b7c:	ff cf       	rjmp	.-2      	; 0xb7c <__stop_program>
